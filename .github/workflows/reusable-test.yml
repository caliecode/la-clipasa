name: Reusable Test Workflow

on:
  workflow_call:
    outputs:
      test_result:
        description: "Result of the test run"
        value: ${{ jobs.test.outputs.result }}

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-24.04
    outputs:
      result: ${{ steps.set-result.outputs.result }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: ./.github/actions/setup

      # source .envrc instead of direnv setup
      - name: Setup project
        run: |
          source .envrc

          # go mod download # it will access network/cache, which is not necessary with -mod=vendor
          go mod verify

          project lint

          cd frontend
          pnpm install

          project test.backend.setup

      - name: Can create initial data
        run: |
          source .envrc

          project db.initial-data

      - name: Test frontend
        run: |
          source .envrc

          project test.frontend

      - name: Diff check
        run: |
          # debug gen: run with --x-force-regen
          git diff --exit-code # -- . ':!dir_to_skip'
          untracked_files=$(git ls-files --others --exclude-standard)
          if [ -n "$untracked_files" ]; then
              echo "[ERROR] Found untracked files:"
              echo "${untracked_files[*]}"
              exit 1
          fi

      - name: Vet
        run: |
          source .envrc

          go vet ./...
          go install golang.org/x/tools/go/analysis/passes/nilness/cmd/nilness@latest
          # due to gqlgen generated files in pkg
          nilness $(go list ./... | grep -v "github.com/caliecode/la-clipasa/internal/gql")

      - name: Test backend
        run: |
          source .envrc

          {
            while sleep 1; do project db.conns-db postgres_test --x-no-exit-cleanup; done
          } &
          bg_pid=$!

          echo -------1-------
          POSTGRES_TRACE=false project test.backend -race -count=50 -timeout=40m
          echo -------2-------
          # some tests are skipped from race
          POSTGRES_TRACE=false project test.backend -count=3 -timeout=40m

          { test -n "$bg_pid" && kill $bg_pid; } || true

      - name: Postgres logs
        if: failure() # always()
        run: docker logs postgres_db_la-clipasa

      - name: Set result output
        id: set-result
        run: echo "result=success" >> $GITHUB_OUTPUT
