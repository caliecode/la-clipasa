directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!], forceGenerate: Boolean) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type ApiKey implements Node @hasRole(role: ADMIN) {
  id: ID!
  updatedAt: Time!
  createdAt: Time!
  apiKey: String!
  expiresOn: Time!
  owner: User!
}
"""
A connection to a list of items.
"""
type ApiKeyConnection {
  """
  A list of edges.
  """
  edges: [ApiKeyEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ApiKeyEdge {
  """
  The item at the end of the edge.
  """
  node: ApiKey
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for ApiKey connections
"""
input ApiKeyOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order ApiKeys.
  """
  field: ApiKeyOrderField!
}
"""
Properties by which ApiKey connections can be ordered.
"""
enum ApiKeyOrderField {
  ID
  UPDATED_AT
  CREATED_AT
}
"""
ApiKeyWhereInput is used for filtering ApiKey objects.
Input was generated by ent.
"""
input ApiKeyWhereInput {
  not: ApiKeyWhereInput
  and: [ApiKeyWhereInput!]
  or: [ApiKeyWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  api_key field predicates
  """
  apiKey: String
  apiKeyNEQ: String
  apiKeyIn: [String!]
  apiKeyNotIn: [String!]
  apiKeyGT: String
  apiKeyGTE: String
  apiKeyLT: String
  apiKeyLTE: String
  apiKeyContains: String
  apiKeyHasPrefix: String
  apiKeyHasSuffix: String
  apiKeyEqualFold: String
  apiKeyContainsFold: String
  """
  expires_on field predicates
  """
  expiresOn: Time
  expiresOnNEQ: Time
  expiresOnIn: [Time!]
  expiresOnNotIn: [Time!]
  expiresOnGT: Time
  expiresOnGTE: Time
  expiresOnLT: Time
  expiresOnLTE: Time
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [UserWhereInput!]
}
type Comment implements Node {
  id: ID!
  updatedAt: Time!
  createdAt: Time!
  deletedAt: Time
  deletedBy: String
  content: String!
  owner: User!
  post: Post
}
"""
A connection to a list of items.
"""
type CommentConnection {
  """
  A list of edges.
  """
  edges: [CommentEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type CommentEdge {
  """
  The item at the end of the edge.
  """
  node: Comment
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Comment connections
"""
input CommentOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Comments.
  """
  field: CommentOrderField!
}
"""
Properties by which Comment connections can be ordered.
"""
enum CommentOrderField {
  ID
  UPDATED_AT
  CREATED_AT
}
"""
CommentWhereInput is used for filtering Comment objects.
Input was generated by ent.
"""
input CommentWhereInput {
  not: CommentWhereInput
  and: [CommentWhereInput!]
  or: [CommentWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  content field predicates
  """
  content: String
  contentNEQ: String
  contentIn: [String!]
  contentNotIn: [String!]
  contentGT: String
  contentGTE: String
  contentLT: String
  contentLTE: String
  contentContains: String
  contentHasPrefix: String
  contentHasSuffix: String
  contentEqualFold: String
  contentContainsFold: String
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [UserWhereInput!]
  """
  post edge predicates
  """
  hasPost: Boolean
  hasPostWith: [PostWhereInput!]
}
"""
CreateApiKeyInput is used for create ApiKey object.
Input was generated by ent.
"""
input CreateApiKeyInput @hasRole(role: ADMIN) {
  apiKey: String!
  expiresOn: Time!
}
"""
CreateCommentInput is used for create Comment object.
Input was generated by ent.
"""
input CreateCommentInput {
  content: String!
  ownerID: ID!
  postID: ID
}
"""
CreatePostCategoryInput is used for create PostCategory object.
Input was generated by ent.
"""
input CreatePostCategoryInput {
  category: PostCategoryCategory!
  postID: ID
}
"""
CreatePostInput is used for create Post object.
Input was generated by ent.
"""
input CreatePostInput {
  pinned: Boolean
  title: String!
  content: String
  link: String!
  moderationComment: String
  isModerated: Boolean
  ownerID: ID!
  commentIDs: [ID!]
  savedByIDs: [ID!]
  likedByIDs: [ID!]
  categoryIDs: [ID!]
}
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  displayName: String!
  """
  the alias of the user is shown alongside the display name
  """
  alias: String
  profileImage: String
  authProvider: UserAuthProvider
  """
  the role of the user
  """
  role: UserRole @hasRole(role: ADMIN)
  """
  the time the user was last seen
  """
  lastSeenAt: Time
  """
  cursor for last post seen
  """
  lastPostSeenCursor: String
  awards: [String!]
  savedPostIDs: [ID!]
  likedPostIDs: [ID!]
  publishedPostIDs: [ID!]
  commentIDs: [ID!]
  apiKeyIDs: [ID!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
"""
A valid JSON string.
"""
scalar JSON
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/caliecode/la-clipasa/internal/ent/generated.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC
  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type Post implements Node {
  id: ID!
  updatedAt: Time!
  createdAt: Time!
  deletedAt: Time
  deletedBy: String
  pinned: Boolean!
  title: String!
  content: String
  link: String!
  moderationComment: String
  isModerated: Boolean!
  entityVector: String
  owner: User!
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Comments returned from the connection.
    """
    orderBy: CommentOrder

    """
    Filtering options for Comments returned from the connection.
    """
    where: CommentWhereInput
  ): CommentConnection!
  savedBy: [User!]
  likedBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Users returned from the connection.
    """
    orderBy: UserOrder

    """
    Filtering options for Users returned from the connection.
    """
    where: UserWhereInput
  ): UserConnection!
  categories: [PostCategory!]
}
type PostCategory implements Node {
  id: ID!
  updatedAt: Time!
  createdAt: Time!
  category: PostCategoryCategory!
  post: Post
}
"""
PostCategoryCategory is enum for the field category
"""
enum PostCategoryCategory @goModel(model: "github.com/caliecode/la-clipasa/internal/ent/generated/postcategory.Category") {
  RANA
  SIN_SONIDO
  MEME_ARTESANAL
  NO_SE_YO
  ORO
  DIAMANTE
  MEH
  ALERTA_GLONETILLO
  GRR
  ENSORDECEDOR
  RAGUUUL
}
"""
A connection to a list of items.
"""
type PostCategoryConnection {
  """
  A list of edges.
  """
  edges: [PostCategoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type PostCategoryEdge {
  """
  The item at the end of the edge.
  """
  node: PostCategory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for PostCategory connections
"""
input PostCategoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order PostCategories.
  """
  field: PostCategoryOrderField!
}
"""
Properties by which PostCategory connections can be ordered.
"""
enum PostCategoryOrderField {
  ID
  UPDATED_AT
  CREATED_AT
}
"""
PostCategoryWhereInput is used for filtering PostCategory objects.
Input was generated by ent.
"""
input PostCategoryWhereInput {
  not: PostCategoryWhereInput
  and: [PostCategoryWhereInput!]
  or: [PostCategoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  category field predicates
  """
  category: PostCategoryCategory
  categoryNEQ: PostCategoryCategory
  categoryIn: [PostCategoryCategory!]
  categoryNotIn: [PostCategoryCategory!]
  """
  post edge predicates
  """
  hasPost: Boolean
  hasPostWith: [PostWhereInput!]
}
"""
A connection to a list of items.
"""
type PostConnection {
  """
  A list of edges.
  """
  edges: [PostEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type PostEdge {
  """
  The item at the end of the edge.
  """
  node: Post
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Post connections
"""
input PostOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Posts.
  """
  field: PostOrderField!
}
"""
Properties by which Post connections can be ordered.
"""
enum PostOrderField {
  ID
  UPDATED_AT
  CREATED_AT
  COMMENTS_COUNT
  LIKED_BY_COUNT
}
"""
PostWhereInput is used for filtering Post objects.
Input was generated by ent.
"""
input PostWhereInput {
  not: PostWhereInput
  and: [PostWhereInput!]
  or: [PostWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  pinned field predicates
  """
  pinned: Boolean
  pinnedNEQ: Boolean
  """
  title field predicates
  """
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  """
  content field predicates
  """
  content: String
  contentNEQ: String
  contentIn: [String!]
  contentNotIn: [String!]
  contentGT: String
  contentGTE: String
  contentLT: String
  contentLTE: String
  contentContains: String
  contentHasPrefix: String
  contentHasSuffix: String
  contentIsNil: Boolean
  contentNotNil: Boolean
  contentEqualFold: String
  contentContainsFold: String
  """
  link field predicates
  """
  link: String
  linkNEQ: String
  linkIn: [String!]
  linkNotIn: [String!]
  linkGT: String
  linkGTE: String
  linkLT: String
  linkLTE: String
  linkContains: String
  linkHasPrefix: String
  linkHasSuffix: String
  linkEqualFold: String
  linkContainsFold: String
  """
  moderation_comment field predicates
  """
  moderationComment: String
  moderationCommentNEQ: String
  moderationCommentIn: [String!]
  moderationCommentNotIn: [String!]
  moderationCommentGT: String
  moderationCommentGTE: String
  moderationCommentLT: String
  moderationCommentLTE: String
  moderationCommentContains: String
  moderationCommentHasPrefix: String
  moderationCommentHasSuffix: String
  moderationCommentIsNil: Boolean
  moderationCommentNotNil: Boolean
  moderationCommentEqualFold: String
  moderationCommentContainsFold: String
  """
  is_moderated field predicates
  """
  isModerated: Boolean
  isModeratedNEQ: Boolean
  """
  entity_vector field predicates
  """
  entityVector: String
  entityVectorNEQ: String
  entityVectorIn: [String!]
  entityVectorNotIn: [String!]
  entityVectorGT: String
  entityVectorGTE: String
  entityVectorLT: String
  entityVectorLTE: String
  entityVectorContains: String
  entityVectorHasPrefix: String
  entityVectorHasSuffix: String
  entityVectorIsNil: Boolean
  entityVectorNotNil: Boolean
  entityVectorEqualFold: String
  entityVectorContainsFold: String
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [UserWhereInput!]
  """
  comments edge predicates
  """
  hasComments: Boolean
  hasCommentsWith: [CommentWhereInput!]
  """
  saved_by edge predicates
  """
  hasSavedBy: Boolean
  hasSavedByWith: [UserWhereInput!]
  """
  liked_by edge predicates
  """
  hasLikedBy: Boolean
  hasLikedByWith: [UserWhereInput!]
  """
  categories edge predicates
  """
  hasCategories: Boolean
  hasCategoriesWith: [PostCategoryWhereInput!]
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  apiKeys(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for ApiKeys returned from the connection.
    """
    orderBy: ApiKeyOrder

    """
    Filtering options for ApiKeys returned from the connection.
    """
    where: ApiKeyWhereInput
  ): ApiKeyConnection!
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Comments returned from the connection.
    """
    orderBy: CommentOrder

    """
    Filtering options for Comments returned from the connection.
    """
    where: CommentWhereInput
  ): CommentConnection!
  posts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Posts returned from the connection.
    """
    orderBy: PostOrder

    """
    Filtering options for Posts returned from the connection.
    """
    where: PostWhereInput
  ): PostConnection!
  postCategories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for PostCategories returned from the connection.
    """
    orderBy: PostCategoryOrder

    """
    Filtering options for PostCategories returned from the connection.
    """
    where: PostCategoryWhereInput
  ): PostCategoryConnection!
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Users returned from the connection.
    """
    orderBy: UserOrder

    """
    Filtering options for Users returned from the connection.
    """
    where: UserWhereInput
  ): UserConnection!
}
"""
UpdateApiKeyInput is used for update ApiKey object.
Input was generated by ent.
"""
input UpdateApiKeyInput @hasRole(role: ADMIN) {
  apiKey: String
  expiresOn: Time
}
"""
UpdateCommentInput is used for update Comment object.
Input was generated by ent.
"""
input UpdateCommentInput {
  content: String
  ownerID: ID
  postID: ID
  clearPost: Boolean
}
"""
UpdatePostCategoryInput is used for update PostCategory object.
Input was generated by ent.
"""
input UpdatePostCategoryInput {
  category: PostCategoryCategory
  postID: ID
  clearPost: Boolean
}
"""
UpdatePostInput is used for update Post object.
Input was generated by ent.
"""
input UpdatePostInput {
  pinned: Boolean
  title: String
  content: String
  clearContent: Boolean
  link: String
  moderationComment: String
  clearModerationComment: Boolean
  isModerated: Boolean
  addCommentIDs: [ID!]
  removeCommentIDs: [ID!]
  clearComments: Boolean
  addSavedByIDs: [ID!]
  removeSavedByIDs: [ID!]
  clearSavedBy: Boolean
  addLikedByIDs: [ID!]
  removeLikedByIDs: [ID!]
  clearLikedBy: Boolean
  addCategoryIDs: [ID!]
  removeCategoryIDs: [ID!]
  clearCategories: Boolean
}
"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  displayName: String
  """
  the alias of the user is shown alongside the display name
  """
  alias: String
  clearAlias: Boolean
  profileImage: String
  clearProfileImage: Boolean
  authProvider: UserAuthProvider
  """
  the role of the user
  """
  role: UserRole @hasRole(role: ADMIN)
  """
  the time the user was last seen
  """
  lastSeenAt: Time
  clearLastSeenAt: Boolean
  """
  cursor for last post seen
  """
  lastPostSeenCursor: String
  clearLastPostSeenCursor: Boolean
  awards: [String!]
  appendAwards: [String!]
  clearAwards: Boolean
  addSavedPostIDs: [ID!]
  removeSavedPostIDs: [ID!]
  clearSavedPosts: Boolean
  addLikedPostIDs: [ID!]
  removeLikedPostIDs: [ID!]
  clearLikedPosts: Boolean
  addPublishedPostIDs: [ID!]
  removePublishedPostIDs: [ID!]
  clearPublishedPosts: Boolean
  addCommentIDs: [ID!]
  removeCommentIDs: [ID!]
  clearComments: Boolean
  addAPIKeyIDs: [ID!]
  removeAPIKeyIDs: [ID!]
  clearAPIKeys: Boolean
}
type User implements Node {
  id: ID!
  updatedAt: Time!
  createdAt: Time!
  deletedAt: Time
  deletedBy: String
  displayName: String!
  """
  the alias of the user is shown alongside the display name
  """
  alias: String
  profileImage: String
  authProvider: UserAuthProvider!
  """
  the role of the user
  """
  role: UserRole!
  """
  the time the user was last seen
  """
  lastSeenAt: Time
  """
  cursor for last post seen
  """
  lastPostSeenCursor: String
  awards: [String!]
  savedPosts: [Post!]
  likedPosts: [Post!]
  publishedPosts: [Post!]
  comments: [Comment!]
  apiKeys: [ApiKey!]
}
"""
UserAuthProvider is enum for the field auth_provider
"""
enum UserAuthProvider @goModel(model: "github.com/caliecode/la-clipasa/internal/ent/generated/user.AuthProvider") {
  TWITCH
}
"""
A connection to a list of items.
"""
type UserConnection {
  """
  A list of edges.
  """
  edges: [UserEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge.
  """
  node: User
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for User connections
"""
input UserOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Users.
  """
  field: UserOrderField!
}
"""
Properties by which User connections can be ordered.
"""
enum UserOrderField {
  ID
  UPDATED_AT
  CREATED_AT
}
"""
UserRole is enum for the field role
"""
enum UserRole @goModel(model: "github.com/caliecode/la-clipasa/internal/ent/generated/user.Role") {
  GUEST
  USER
  ADMIN
  MODERATOR
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  display_name field predicates
  """
  displayName: String
  displayNameNEQ: String
  displayNameIn: [String!]
  displayNameNotIn: [String!]
  displayNameGT: String
  displayNameGTE: String
  displayNameLT: String
  displayNameLTE: String
  displayNameContains: String
  displayNameHasPrefix: String
  displayNameHasSuffix: String
  displayNameEqualFold: String
  displayNameContainsFold: String
  """
  alias field predicates
  """
  alias: String
  aliasNEQ: String
  aliasIn: [String!]
  aliasNotIn: [String!]
  aliasGT: String
  aliasGTE: String
  aliasLT: String
  aliasLTE: String
  aliasContains: String
  aliasHasPrefix: String
  aliasHasSuffix: String
  aliasIsNil: Boolean
  aliasNotNil: Boolean
  aliasEqualFold: String
  aliasContainsFold: String
  """
  profile_image field predicates
  """
  profileImage: String
  profileImageNEQ: String
  profileImageIn: [String!]
  profileImageNotIn: [String!]
  profileImageGT: String
  profileImageGTE: String
  profileImageLT: String
  profileImageLTE: String
  profileImageContains: String
  profileImageHasPrefix: String
  profileImageHasSuffix: String
  profileImageIsNil: Boolean
  profileImageNotNil: Boolean
  profileImageEqualFold: String
  profileImageContainsFold: String
  """
  auth_provider field predicates
  """
  authProvider: UserAuthProvider
  authProviderNEQ: UserAuthProvider
  authProviderIn: [UserAuthProvider!]
  authProviderNotIn: [UserAuthProvider!]
  """
  role field predicates
  """
  role: UserRole
  roleNEQ: UserRole
  roleIn: [UserRole!]
  roleNotIn: [UserRole!]
  """
  last_seen_at field predicates
  """
  lastSeenAt: Time
  lastSeenAtNEQ: Time
  lastSeenAtIn: [Time!]
  lastSeenAtNotIn: [Time!]
  lastSeenAtGT: Time
  lastSeenAtGTE: Time
  lastSeenAtLT: Time
  lastSeenAtLTE: Time
  lastSeenAtIsNil: Boolean
  lastSeenAtNotNil: Boolean
  """
  last_post_seen_cursor field predicates
  """
  lastPostSeenCursor: String
  lastPostSeenCursorNEQ: String
  lastPostSeenCursorIn: [String!]
  lastPostSeenCursorNotIn: [String!]
  lastPostSeenCursorGT: String
  lastPostSeenCursorGTE: String
  lastPostSeenCursorLT: String
  lastPostSeenCursorLTE: String
  lastPostSeenCursorContains: String
  lastPostSeenCursorHasPrefix: String
  lastPostSeenCursorHasSuffix: String
  lastPostSeenCursorIsNil: Boolean
  lastPostSeenCursorNotNil: Boolean
  lastPostSeenCursorEqualFold: String
  lastPostSeenCursorContainsFold: String
  """
  saved_posts edge predicates
  """
  hasSavedPosts: Boolean
  hasSavedPostsWith: [PostWhereInput!]
  """
  liked_posts edge predicates
  """
  hasLikedPosts: Boolean
  hasLikedPostsWith: [PostWhereInput!]
  """
  published_posts edge predicates
  """
  hasPublishedPosts: Boolean
  hasPublishedPostsWith: [PostWhereInput!]
  """
  comments edge predicates
  """
  hasComments: Boolean
  hasCommentsWith: [CommentWhereInput!]
  """
  api_keys edge predicates
  """
  hasAPIKeys: Boolean
  hasAPIKeysWith: [ApiKeyWhereInput!]
}
