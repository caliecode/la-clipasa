// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package testclient

import (
	"context"
	"time"

	"github.com/Yamashou/gqlgenc/clientv2"
	"github.com/caliecode/la-clipasa/internal/ent/generated/postcategory"
	"github.com/google/uuid"
)

type TestGraphClient interface {
	CreatePostMutation(ctx context.Context, input CreatePostInput, interceptors ...clientv2.RequestInterceptor) (*CreatePostMutation, error)
	CreatePostWithCategoriesMutation(ctx context.Context, input CreatePostWithCategoriesInput, interceptors ...clientv2.RequestInterceptor) (*CreatePostWithCategoriesMutation, error)
	UpdatePostMutation(ctx context.Context, id uuid.UUID, input UpdatePostInput, interceptors ...clientv2.RequestInterceptor) (*UpdatePostMutation, error)
	DeletePostMutation(ctx context.Context, id uuid.UUID, interceptors ...clientv2.RequestInterceptor) (*DeletePostMutation, error)
	RestorePostMutation(ctx context.Context, id uuid.UUID, interceptors ...clientv2.RequestInterceptor) (*RestorePostMutation, error)
	GetPostsQuery(ctx context.Context, first *int64, after *string, last *int64, before *string, where *PostWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetPostsQuery, error)
}

type Client struct {
	Client *clientv2.Client
}

func NewClient(cli clientv2.HttpClient, baseURL string, options *clientv2.Options, interceptors ...clientv2.RequestInterceptor) TestGraphClient {
	return &Client{Client: clientv2.NewClient(cli, baseURL, options, interceptors...)}
}

type PostFields struct {
	ID                uuid.UUID                "json:\"id\" graphql:\"id\""
	Title             string                   "json:\"title\" graphql:\"title\""
	Link              string                   "json:\"link\" graphql:\"link\""
	Content           *string                  "json:\"content,omitempty\" graphql:\"content\""
	ModerationComment *string                  "json:\"moderationComment,omitempty\" graphql:\"moderationComment\""
	IsModerated       bool                     "json:\"isModerated\" graphql:\"isModerated\""
	ModeratedAt       *time.Time               "json:\"moderatedAt,omitempty\" graphql:\"moderatedAt\""
	DeletedAt         *time.Time               "json:\"deletedAt,omitempty\" graphql:\"deletedAt\""
	Owner             PostFields_Owner         "json:\"owner\" graphql:\"owner\""
	Categories        []*PostFields_Categories "json:\"categories,omitempty\" graphql:\"categories\""
}

func (t *PostFields) GetID() *uuid.UUID {
	if t == nil {
		t = &PostFields{}
	}
	return &t.ID
}
func (t *PostFields) GetTitle() string {
	if t == nil {
		t = &PostFields{}
	}
	return t.Title
}
func (t *PostFields) GetLink() string {
	if t == nil {
		t = &PostFields{}
	}
	return t.Link
}
func (t *PostFields) GetContent() *string {
	if t == nil {
		t = &PostFields{}
	}
	return t.Content
}
func (t *PostFields) GetModerationComment() *string {
	if t == nil {
		t = &PostFields{}
	}
	return t.ModerationComment
}
func (t *PostFields) GetIsModerated() bool {
	if t == nil {
		t = &PostFields{}
	}
	return t.IsModerated
}
func (t *PostFields) GetModeratedAt() *time.Time {
	if t == nil {
		t = &PostFields{}
	}
	return t.ModeratedAt
}
func (t *PostFields) GetDeletedAt() *time.Time {
	if t == nil {
		t = &PostFields{}
	}
	return t.DeletedAt
}
func (t *PostFields) GetOwner() *PostFields_Owner {
	if t == nil {
		t = &PostFields{}
	}
	return &t.Owner
}
func (t *PostFields) GetCategories() []*PostFields_Categories {
	if t == nil {
		t = &PostFields{}
	}
	return t.Categories
}

type PostConnectionFields struct {
	TotalCount int64                         "json:\"totalCount\" graphql:\"totalCount\""
	Edges      []*PostConnectionFields_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *PostConnectionFields) GetTotalCount() int64 {
	if t == nil {
		t = &PostConnectionFields{}
	}
	return t.TotalCount
}
func (t *PostConnectionFields) GetEdges() []*PostConnectionFields_Edges {
	if t == nil {
		t = &PostConnectionFields{}
	}
	return t.Edges
}

type PostFields_Owner struct {
	DisplayName string    "json:\"displayName\" graphql:\"displayName\""
	ID          uuid.UUID "json:\"id\" graphql:\"id\""
}

func (t *PostFields_Owner) GetDisplayName() string {
	if t == nil {
		t = &PostFields_Owner{}
	}
	return t.DisplayName
}
func (t *PostFields_Owner) GetID() *uuid.UUID {
	if t == nil {
		t = &PostFields_Owner{}
	}
	return &t.ID
}

type PostFields_Categories struct {
	Category postcategory.Category "json:\"category\" graphql:\"category\""
	ID       uuid.UUID             "json:\"id\" graphql:\"id\""
}

func (t *PostFields_Categories) GetCategory() *postcategory.Category {
	if t == nil {
		t = &PostFields_Categories{}
	}
	return &t.Category
}
func (t *PostFields_Categories) GetID() *uuid.UUID {
	if t == nil {
		t = &PostFields_Categories{}
	}
	return &t.ID
}

type PostConnectionFields_Edges_Node_PostFields_Owner struct {
	DisplayName string    "json:\"displayName\" graphql:\"displayName\""
	ID          uuid.UUID "json:\"id\" graphql:\"id\""
}

func (t *PostConnectionFields_Edges_Node_PostFields_Owner) GetDisplayName() string {
	if t == nil {
		t = &PostConnectionFields_Edges_Node_PostFields_Owner{}
	}
	return t.DisplayName
}
func (t *PostConnectionFields_Edges_Node_PostFields_Owner) GetID() *uuid.UUID {
	if t == nil {
		t = &PostConnectionFields_Edges_Node_PostFields_Owner{}
	}
	return &t.ID
}

type PostConnectionFields_Edges_Node_PostFields_Categories struct {
	Category postcategory.Category "json:\"category\" graphql:\"category\""
	ID       uuid.UUID             "json:\"id\" graphql:\"id\""
}

func (t *PostConnectionFields_Edges_Node_PostFields_Categories) GetCategory() *postcategory.Category {
	if t == nil {
		t = &PostConnectionFields_Edges_Node_PostFields_Categories{}
	}
	return &t.Category
}
func (t *PostConnectionFields_Edges_Node_PostFields_Categories) GetID() *uuid.UUID {
	if t == nil {
		t = &PostConnectionFields_Edges_Node_PostFields_Categories{}
	}
	return &t.ID
}

type PostConnectionFields_Edges struct {
	Node *PostFields "json:\"node,omitempty\" graphql:\"node\""
}

func (t *PostConnectionFields_Edges) GetNode() *PostFields {
	if t == nil {
		t = &PostConnectionFields_Edges{}
	}
	return t.Node
}

type CreatePostMutation_CreatePost_Post_PostFields_Owner struct {
	DisplayName string    "json:\"displayName\" graphql:\"displayName\""
	ID          uuid.UUID "json:\"id\" graphql:\"id\""
}

func (t *CreatePostMutation_CreatePost_Post_PostFields_Owner) GetDisplayName() string {
	if t == nil {
		t = &CreatePostMutation_CreatePost_Post_PostFields_Owner{}
	}
	return t.DisplayName
}
func (t *CreatePostMutation_CreatePost_Post_PostFields_Owner) GetID() *uuid.UUID {
	if t == nil {
		t = &CreatePostMutation_CreatePost_Post_PostFields_Owner{}
	}
	return &t.ID
}

type CreatePostMutation_CreatePost_Post_PostFields_Categories struct {
	Category postcategory.Category "json:\"category\" graphql:\"category\""
	ID       uuid.UUID             "json:\"id\" graphql:\"id\""
}

func (t *CreatePostMutation_CreatePost_Post_PostFields_Categories) GetCategory() *postcategory.Category {
	if t == nil {
		t = &CreatePostMutation_CreatePost_Post_PostFields_Categories{}
	}
	return &t.Category
}
func (t *CreatePostMutation_CreatePost_Post_PostFields_Categories) GetID() *uuid.UUID {
	if t == nil {
		t = &CreatePostMutation_CreatePost_Post_PostFields_Categories{}
	}
	return &t.ID
}

type CreatePostMutation_CreatePost struct {
	Post *PostFields "json:\"post\" graphql:\"post\""
}

func (t *CreatePostMutation_CreatePost) GetPost() *PostFields {
	if t == nil {
		t = &CreatePostMutation_CreatePost{}
	}
	return t.Post
}

type CreatePostWithCategoriesMutation_CreatePostWithCategories_Post_PostFields_Owner struct {
	DisplayName string    "json:\"displayName\" graphql:\"displayName\""
	ID          uuid.UUID "json:\"id\" graphql:\"id\""
}

func (t *CreatePostWithCategoriesMutation_CreatePostWithCategories_Post_PostFields_Owner) GetDisplayName() string {
	if t == nil {
		t = &CreatePostWithCategoriesMutation_CreatePostWithCategories_Post_PostFields_Owner{}
	}
	return t.DisplayName
}
func (t *CreatePostWithCategoriesMutation_CreatePostWithCategories_Post_PostFields_Owner) GetID() *uuid.UUID {
	if t == nil {
		t = &CreatePostWithCategoriesMutation_CreatePostWithCategories_Post_PostFields_Owner{}
	}
	return &t.ID
}

type CreatePostWithCategoriesMutation_CreatePostWithCategories_Post_PostFields_Categories struct {
	Category postcategory.Category "json:\"category\" graphql:\"category\""
	ID       uuid.UUID             "json:\"id\" graphql:\"id\""
}

func (t *CreatePostWithCategoriesMutation_CreatePostWithCategories_Post_PostFields_Categories) GetCategory() *postcategory.Category {
	if t == nil {
		t = &CreatePostWithCategoriesMutation_CreatePostWithCategories_Post_PostFields_Categories{}
	}
	return &t.Category
}
func (t *CreatePostWithCategoriesMutation_CreatePostWithCategories_Post_PostFields_Categories) GetID() *uuid.UUID {
	if t == nil {
		t = &CreatePostWithCategoriesMutation_CreatePostWithCategories_Post_PostFields_Categories{}
	}
	return &t.ID
}

type CreatePostWithCategoriesMutation_CreatePostWithCategories struct {
	Post *PostFields "json:\"post\" graphql:\"post\""
}

func (t *CreatePostWithCategoriesMutation_CreatePostWithCategories) GetPost() *PostFields {
	if t == nil {
		t = &CreatePostWithCategoriesMutation_CreatePostWithCategories{}
	}
	return t.Post
}

type UpdatePostMutation_UpdatePost_Post_PostFields_Owner struct {
	DisplayName string    "json:\"displayName\" graphql:\"displayName\""
	ID          uuid.UUID "json:\"id\" graphql:\"id\""
}

func (t *UpdatePostMutation_UpdatePost_Post_PostFields_Owner) GetDisplayName() string {
	if t == nil {
		t = &UpdatePostMutation_UpdatePost_Post_PostFields_Owner{}
	}
	return t.DisplayName
}
func (t *UpdatePostMutation_UpdatePost_Post_PostFields_Owner) GetID() *uuid.UUID {
	if t == nil {
		t = &UpdatePostMutation_UpdatePost_Post_PostFields_Owner{}
	}
	return &t.ID
}

type UpdatePostMutation_UpdatePost_Post_PostFields_Categories struct {
	Category postcategory.Category "json:\"category\" graphql:\"category\""
	ID       uuid.UUID             "json:\"id\" graphql:\"id\""
}

func (t *UpdatePostMutation_UpdatePost_Post_PostFields_Categories) GetCategory() *postcategory.Category {
	if t == nil {
		t = &UpdatePostMutation_UpdatePost_Post_PostFields_Categories{}
	}
	return &t.Category
}
func (t *UpdatePostMutation_UpdatePost_Post_PostFields_Categories) GetID() *uuid.UUID {
	if t == nil {
		t = &UpdatePostMutation_UpdatePost_Post_PostFields_Categories{}
	}
	return &t.ID
}

type UpdatePostMutation_UpdatePost struct {
	Post *PostFields "json:\"post\" graphql:\"post\""
}

func (t *UpdatePostMutation_UpdatePost) GetPost() *PostFields {
	if t == nil {
		t = &UpdatePostMutation_UpdatePost{}
	}
	return t.Post
}

type DeletePostMutation_DeletePost struct {
	DeletedID uuid.UUID "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeletePostMutation_DeletePost) GetDeletedID() *uuid.UUID {
	if t == nil {
		t = &DeletePostMutation_DeletePost{}
	}
	return &t.DeletedID
}

type GetPostsQuery_Posts_PostConnectionFields_Edges_Node_PostFields_Owner struct {
	DisplayName string    "json:\"displayName\" graphql:\"displayName\""
	ID          uuid.UUID "json:\"id\" graphql:\"id\""
}

func (t *GetPostsQuery_Posts_PostConnectionFields_Edges_Node_PostFields_Owner) GetDisplayName() string {
	if t == nil {
		t = &GetPostsQuery_Posts_PostConnectionFields_Edges_Node_PostFields_Owner{}
	}
	return t.DisplayName
}
func (t *GetPostsQuery_Posts_PostConnectionFields_Edges_Node_PostFields_Owner) GetID() *uuid.UUID {
	if t == nil {
		t = &GetPostsQuery_Posts_PostConnectionFields_Edges_Node_PostFields_Owner{}
	}
	return &t.ID
}

type GetPostsQuery_Posts_PostConnectionFields_Edges_Node_PostFields_Categories struct {
	Category postcategory.Category "json:\"category\" graphql:\"category\""
	ID       uuid.UUID             "json:\"id\" graphql:\"id\""
}

func (t *GetPostsQuery_Posts_PostConnectionFields_Edges_Node_PostFields_Categories) GetCategory() *postcategory.Category {
	if t == nil {
		t = &GetPostsQuery_Posts_PostConnectionFields_Edges_Node_PostFields_Categories{}
	}
	return &t.Category
}
func (t *GetPostsQuery_Posts_PostConnectionFields_Edges_Node_PostFields_Categories) GetID() *uuid.UUID {
	if t == nil {
		t = &GetPostsQuery_Posts_PostConnectionFields_Edges_Node_PostFields_Categories{}
	}
	return &t.ID
}

type GetPostsQuery_Posts_PostConnectionFields_Edges struct {
	Node *PostFields "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetPostsQuery_Posts_PostConnectionFields_Edges) GetNode() *PostFields {
	if t == nil {
		t = &GetPostsQuery_Posts_PostConnectionFields_Edges{}
	}
	return t.Node
}

type CreatePostMutation struct {
	CreatePost CreatePostMutation_CreatePost "json:\"createPost\" graphql:\"createPost\""
}

func (t *CreatePostMutation) GetCreatePost() *CreatePostMutation_CreatePost {
	if t == nil {
		t = &CreatePostMutation{}
	}
	return &t.CreatePost
}

type CreatePostWithCategoriesMutation struct {
	CreatePostWithCategories CreatePostWithCategoriesMutation_CreatePostWithCategories "json:\"createPostWithCategories\" graphql:\"createPostWithCategories\""
}

func (t *CreatePostWithCategoriesMutation) GetCreatePostWithCategories() *CreatePostWithCategoriesMutation_CreatePostWithCategories {
	if t == nil {
		t = &CreatePostWithCategoriesMutation{}
	}
	return &t.CreatePostWithCategories
}

type UpdatePostMutation struct {
	UpdatePost UpdatePostMutation_UpdatePost "json:\"updatePost\" graphql:\"updatePost\""
}

func (t *UpdatePostMutation) GetUpdatePost() *UpdatePostMutation_UpdatePost {
	if t == nil {
		t = &UpdatePostMutation{}
	}
	return &t.UpdatePost
}

type DeletePostMutation struct {
	DeletePost DeletePostMutation_DeletePost "json:\"deletePost\" graphql:\"deletePost\""
}

func (t *DeletePostMutation) GetDeletePost() *DeletePostMutation_DeletePost {
	if t == nil {
		t = &DeletePostMutation{}
	}
	return &t.DeletePost
}

type RestorePostMutation struct {
	RestorePost *bool "json:\"restorePost,omitempty\" graphql:\"restorePost\""
}

func (t *RestorePostMutation) GetRestorePost() *bool {
	if t == nil {
		t = &RestorePostMutation{}
	}
	return t.RestorePost
}

type GetPostsQuery struct {
	Posts *PostConnectionFields "json:\"posts\" graphql:\"posts\""
}

func (t *GetPostsQuery) GetPosts() *PostConnectionFields {
	if t == nil {
		t = &GetPostsQuery{}
	}
	return t.Posts
}

const CreatePostMutationDocument = `mutation CreatePostMutation ($input: CreatePostInput!) {
	createPost(input: $input) {
		post {
			... PostFields
		}
	}
}
fragment PostFields on Post {
	id
	title
	link
	content
	moderationComment
	isModerated
	moderatedAt
	deletedAt
	owner {
		id
		displayName
	}
	categories {
		id
		category
	}
}
`

func (c *Client) CreatePostMutation(ctx context.Context, input CreatePostInput, interceptors ...clientv2.RequestInterceptor) (*CreatePostMutation, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreatePostMutation
	if err := c.Client.Post(ctx, "CreatePostMutation", CreatePostMutationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreatePostWithCategoriesMutationDocument = `mutation CreatePostWithCategoriesMutation ($input: CreatePostWithCategoriesInput!) {
	createPostWithCategories(input: $input) {
		post {
			... PostFields
		}
	}
}
fragment PostFields on Post {
	id
	title
	link
	content
	moderationComment
	isModerated
	moderatedAt
	deletedAt
	owner {
		id
		displayName
	}
	categories {
		id
		category
	}
}
`

func (c *Client) CreatePostWithCategoriesMutation(ctx context.Context, input CreatePostWithCategoriesInput, interceptors ...clientv2.RequestInterceptor) (*CreatePostWithCategoriesMutation, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreatePostWithCategoriesMutation
	if err := c.Client.Post(ctx, "CreatePostWithCategoriesMutation", CreatePostWithCategoriesMutationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdatePostMutationDocument = `mutation UpdatePostMutation ($id: ID!, $input: UpdatePostInput!) {
	updatePost(id: $id, input: $input) {
		post {
			... PostFields
		}
	}
}
fragment PostFields on Post {
	id
	title
	link
	content
	moderationComment
	isModerated
	moderatedAt
	deletedAt
	owner {
		id
		displayName
	}
	categories {
		id
		category
	}
}
`

func (c *Client) UpdatePostMutation(ctx context.Context, id uuid.UUID, input UpdatePostInput, interceptors ...clientv2.RequestInterceptor) (*UpdatePostMutation, error) {
	vars := map[string]any{
		"id":    id,
		"input": input,
	}

	var res UpdatePostMutation
	if err := c.Client.Post(ctx, "UpdatePostMutation", UpdatePostMutationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeletePostMutationDocument = `mutation DeletePostMutation ($id: ID!) {
	deletePost(id: $id) {
		deletedID
	}
}
`

func (c *Client) DeletePostMutation(ctx context.Context, id uuid.UUID, interceptors ...clientv2.RequestInterceptor) (*DeletePostMutation, error) {
	vars := map[string]any{
		"id": id,
	}

	var res DeletePostMutation
	if err := c.Client.Post(ctx, "DeletePostMutation", DeletePostMutationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const RestorePostMutationDocument = `mutation RestorePostMutation ($id: ID!) {
	restorePost(id: $id)
}
`

func (c *Client) RestorePostMutation(ctx context.Context, id uuid.UUID, interceptors ...clientv2.RequestInterceptor) (*RestorePostMutation, error) {
	vars := map[string]any{
		"id": id,
	}

	var res RestorePostMutation
	if err := c.Client.Post(ctx, "RestorePostMutation", RestorePostMutationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetPostsQueryDocument = `query GetPostsQuery ($first: Int, $after: Cursor, $last: Int, $before: Cursor, $where: PostWhereInput) {
	posts(first: $first, after: $after, last: $last, before: $before, where: $where) {
		... PostConnectionFields
	}
}
fragment PostConnectionFields on PostConnection {
	totalCount
	edges {
		node {
			... PostFields
		}
	}
}
fragment PostFields on Post {
	id
	title
	link
	content
	moderationComment
	isModerated
	moderatedAt
	deletedAt
	owner {
		id
		displayName
	}
	categories {
		id
		category
	}
}
`

func (c *Client) GetPostsQuery(ctx context.Context, first *int64, after *string, last *int64, before *string, where *PostWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetPostsQuery, error) {
	vars := map[string]any{
		"first":  first,
		"after":  after,
		"last":   last,
		"before": before,
		"where":  where,
	}

	var res GetPostsQuery
	if err := c.Client.Post(ctx, "GetPostsQuery", GetPostsQueryDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

var DocumentOperationNames = map[string]string{
	CreatePostMutationDocument:               "CreatePostMutation",
	CreatePostWithCategoriesMutationDocument: "CreatePostWithCategoriesMutation",
	UpdatePostMutationDocument:               "UpdatePostMutation",
	DeletePostMutationDocument:               "DeletePostMutation",
	RestorePostMutationDocument:              "RestorePostMutation",
	GetPostsQueryDocument:                    "GetPostsQuery",
}
