// Code generated by ent, DO NOT EDIT.

package generated

import (
	"time"

	"github.com/caliecode/la-clipasa/internal/ent/generated/postcategory"
	"github.com/caliecode/la-clipasa/internal/ent/generated/user"
	"github.com/google/uuid"
)

// CreateApiKeyInput represents a mutation input for creating apikeys.
type CreateApiKeyInput struct {
	ExpiresOn time.Time
}

// Mutate applies the CreateApiKeyInput on the ApiKeyMutation builder.
func (i *CreateApiKeyInput) Mutate(m *ApiKeyMutation) {
	m.SetExpiresOn(i.ExpiresOn)
}

// SetInput applies the change-set in the CreateApiKeyInput on the ApiKeyCreate builder.
func (c *ApiKeyCreate) SetInput(i CreateApiKeyInput) *ApiKeyCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateApiKeyInput represents a mutation input for updating apikeys.
type UpdateApiKeyInput struct {
	ExpiresOn *time.Time
}

// Mutate applies the UpdateApiKeyInput on the ApiKeyMutation builder.
func (i *UpdateApiKeyInput) Mutate(m *ApiKeyMutation) {
	if v := i.ExpiresOn; v != nil {
		m.SetExpiresOn(*v)
	}
}

// SetInput applies the change-set in the UpdateApiKeyInput on the ApiKeyUpdate builder.
func (c *ApiKeyUpdate) SetInput(i UpdateApiKeyInput) *ApiKeyUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateApiKeyInput on the ApiKeyUpdateOne builder.
func (c *ApiKeyUpdateOne) SetInput(i UpdateApiKeyInput) *ApiKeyUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateCommentInput represents a mutation input for creating comments.
type CreateCommentInput struct {
	Content string
	OwnerID uuid.UUID
	PostID  *uuid.UUID
}

// Mutate applies the CreateCommentInput on the CommentMutation builder.
func (i *CreateCommentInput) Mutate(m *CommentMutation) {
	m.SetContent(i.Content)
	m.SetOwnerID(i.OwnerID)
	if v := i.PostID; v != nil {
		m.SetPostID(*v)
	}
}

// SetInput applies the change-set in the CreateCommentInput on the CommentCreate builder.
func (c *CommentCreate) SetInput(i CreateCommentInput) *CommentCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateCommentInput represents a mutation input for updating comments.
type UpdateCommentInput struct {
	Content   *string
	OwnerID   *uuid.UUID
	ClearPost bool
	PostID    *uuid.UUID
}

// Mutate applies the UpdateCommentInput on the CommentMutation builder.
func (i *UpdateCommentInput) Mutate(m *CommentMutation) {
	if v := i.Content; v != nil {
		m.SetContent(*v)
	}
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
	if i.ClearPost {
		m.ClearPost()
	}
	if v := i.PostID; v != nil {
		m.SetPostID(*v)
	}
}

// SetInput applies the change-set in the UpdateCommentInput on the CommentUpdate builder.
func (c *CommentUpdate) SetInput(i UpdateCommentInput) *CommentUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateCommentInput on the CommentUpdateOne builder.
func (c *CommentUpdateOne) SetInput(i UpdateCommentInput) *CommentUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreatePostInput represents a mutation input for creating posts.
type CreatePostInput struct {
	Pinned            *bool
	Title             string
	Content           *string
	Link              string
	ModerationComment *string
	IsModerated       *bool
	OwnerID           uuid.UUID
	CommentIDs        []uuid.UUID
	SavedByIDs        []uuid.UUID
	LikedByIDs        []uuid.UUID
	CategoryIDs       []uuid.UUID
}

// Mutate applies the CreatePostInput on the PostMutation builder.
func (i *CreatePostInput) Mutate(m *PostMutation) {
	if v := i.Pinned; v != nil {
		m.SetPinned(*v)
	}
	m.SetTitle(i.Title)
	if v := i.Content; v != nil {
		m.SetContent(*v)
	}
	m.SetLink(i.Link)
	if v := i.ModerationComment; v != nil {
		m.SetModerationComment(*v)
	}
	if v := i.IsModerated; v != nil {
		m.SetIsModerated(*v)
	}
	m.SetOwnerID(i.OwnerID)
	if v := i.CommentIDs; len(v) > 0 {
		m.AddCommentIDs(v...)
	}
	if v := i.SavedByIDs; len(v) > 0 {
		m.AddSavedByIDs(v...)
	}
	if v := i.LikedByIDs; len(v) > 0 {
		m.AddLikedByIDs(v...)
	}
	if v := i.CategoryIDs; len(v) > 0 {
		m.AddCategoryIDs(v...)
	}
}

// SetInput applies the change-set in the CreatePostInput on the PostCreate builder.
func (c *PostCreate) SetInput(i CreatePostInput) *PostCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdatePostInput represents a mutation input for updating posts.
type UpdatePostInput struct {
	Pinned                 *bool
	Title                  *string
	ClearContent           bool
	Content                *string
	Link                   *string
	ClearModerationComment bool
	ModerationComment      *string
	IsModerated            *bool
	ClearComments          bool
	AddCommentIDs          []uuid.UUID
	RemoveCommentIDs       []uuid.UUID
	ClearSavedBy           bool
	AddSavedByIDs          []uuid.UUID
	RemoveSavedByIDs       []uuid.UUID
	ClearLikedBy           bool
	AddLikedByIDs          []uuid.UUID
	RemoveLikedByIDs       []uuid.UUID
	ClearCategories        bool
	AddCategoryIDs         []uuid.UUID
	RemoveCategoryIDs      []uuid.UUID
}

// Mutate applies the UpdatePostInput on the PostMutation builder.
func (i *UpdatePostInput) Mutate(m *PostMutation) {
	if v := i.Pinned; v != nil {
		m.SetPinned(*v)
	}
	if v := i.Title; v != nil {
		m.SetTitle(*v)
	}
	if i.ClearContent {
		m.ClearContent()
	}
	if v := i.Content; v != nil {
		m.SetContent(*v)
	}
	if v := i.Link; v != nil {
		m.SetLink(*v)
	}
	if i.ClearModerationComment {
		m.ClearModerationComment()
	}
	if v := i.ModerationComment; v != nil {
		m.SetModerationComment(*v)
	}
	if v := i.IsModerated; v != nil {
		m.SetIsModerated(*v)
	}
	if i.ClearComments {
		m.ClearComments()
	}
	if v := i.AddCommentIDs; len(v) > 0 {
		m.AddCommentIDs(v...)
	}
	if v := i.RemoveCommentIDs; len(v) > 0 {
		m.RemoveCommentIDs(v...)
	}
	if i.ClearSavedBy {
		m.ClearSavedBy()
	}
	if v := i.AddSavedByIDs; len(v) > 0 {
		m.AddSavedByIDs(v...)
	}
	if v := i.RemoveSavedByIDs; len(v) > 0 {
		m.RemoveSavedByIDs(v...)
	}
	if i.ClearLikedBy {
		m.ClearLikedBy()
	}
	if v := i.AddLikedByIDs; len(v) > 0 {
		m.AddLikedByIDs(v...)
	}
	if v := i.RemoveLikedByIDs; len(v) > 0 {
		m.RemoveLikedByIDs(v...)
	}
	if i.ClearCategories {
		m.ClearCategories()
	}
	if v := i.AddCategoryIDs; len(v) > 0 {
		m.AddCategoryIDs(v...)
	}
	if v := i.RemoveCategoryIDs; len(v) > 0 {
		m.RemoveCategoryIDs(v...)
	}
}

// SetInput applies the change-set in the UpdatePostInput on the PostUpdate builder.
func (c *PostUpdate) SetInput(i UpdatePostInput) *PostUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdatePostInput on the PostUpdateOne builder.
func (c *PostUpdateOne) SetInput(i UpdatePostInput) *PostUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreatePostCategoryInput represents a mutation input for creating postcategories.
type CreatePostCategoryInput struct {
	Category postcategory.Category
	PostID   *uuid.UUID
}

// Mutate applies the CreatePostCategoryInput on the PostCategoryMutation builder.
func (i *CreatePostCategoryInput) Mutate(m *PostCategoryMutation) {
	m.SetCategory(i.Category)
	if v := i.PostID; v != nil {
		m.SetPostID(*v)
	}
}

// SetInput applies the change-set in the CreatePostCategoryInput on the PostCategoryCreate builder.
func (c *PostCategoryCreate) SetInput(i CreatePostCategoryInput) *PostCategoryCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdatePostCategoryInput represents a mutation input for updating postcategories.
type UpdatePostCategoryInput struct {
	Category  *postcategory.Category
	ClearPost bool
	PostID    *uuid.UUID
}

// Mutate applies the UpdatePostCategoryInput on the PostCategoryMutation builder.
func (i *UpdatePostCategoryInput) Mutate(m *PostCategoryMutation) {
	if v := i.Category; v != nil {
		m.SetCategory(*v)
	}
	if i.ClearPost {
		m.ClearPost()
	}
	if v := i.PostID; v != nil {
		m.SetPostID(*v)
	}
}

// SetInput applies the change-set in the UpdatePostCategoryInput on the PostCategoryUpdate builder.
func (c *PostCategoryUpdate) SetInput(i UpdatePostCategoryInput) *PostCategoryUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdatePostCategoryInput on the PostCategoryUpdateOne builder.
func (c *PostCategoryUpdateOne) SetInput(i UpdatePostCategoryInput) *PostCategoryUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateRefreshTokenInput represents a mutation input for creating refreshtokens.
type CreateRefreshTokenInput struct {
	ExpiresAt time.Time
	Revoked   *bool
	IPAddress *string
	UserAgent *string
	OwnerID   uuid.UUID
}

// Mutate applies the CreateRefreshTokenInput on the RefreshTokenMutation builder.
func (i *CreateRefreshTokenInput) Mutate(m *RefreshTokenMutation) {
	m.SetExpiresAt(i.ExpiresAt)
	if v := i.Revoked; v != nil {
		m.SetRevoked(*v)
	}
	if v := i.IPAddress; v != nil {
		m.SetIPAddress(*v)
	}
	if v := i.UserAgent; v != nil {
		m.SetUserAgent(*v)
	}
	m.SetOwnerID(i.OwnerID)
}

// SetInput applies the change-set in the CreateRefreshTokenInput on the RefreshTokenCreate builder.
func (c *RefreshTokenCreate) SetInput(i CreateRefreshTokenInput) *RefreshTokenCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateRefreshTokenInput represents a mutation input for updating refreshtokens.
type UpdateRefreshTokenInput struct {
	ExpiresAt      *time.Time
	Revoked        *bool
	ClearIPAddress bool
	IPAddress      *string
	ClearUserAgent bool
	UserAgent      *string
	OwnerID        *uuid.UUID
}

// Mutate applies the UpdateRefreshTokenInput on the RefreshTokenMutation builder.
func (i *UpdateRefreshTokenInput) Mutate(m *RefreshTokenMutation) {
	if v := i.ExpiresAt; v != nil {
		m.SetExpiresAt(*v)
	}
	if v := i.Revoked; v != nil {
		m.SetRevoked(*v)
	}
	if i.ClearIPAddress {
		m.ClearIPAddress()
	}
	if v := i.IPAddress; v != nil {
		m.SetIPAddress(*v)
	}
	if i.ClearUserAgent {
		m.ClearUserAgent()
	}
	if v := i.UserAgent; v != nil {
		m.SetUserAgent(*v)
	}
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
}

// SetInput applies the change-set in the UpdateRefreshTokenInput on the RefreshTokenUpdate builder.
func (c *RefreshTokenUpdate) SetInput(i UpdateRefreshTokenInput) *RefreshTokenUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateRefreshTokenInput on the RefreshTokenUpdateOne builder.
func (c *RefreshTokenUpdateOne) SetInput(i UpdateRefreshTokenInput) *RefreshTokenUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	DisplayName        string
	Alias              *string
	ProfileImage       *string
	AuthProvider       *user.AuthProvider
	Role               *user.Role
	LastSeenAt         *time.Time
	LastPostSeenCursor *string
	Awards             []string
	SavedPostIDs       []uuid.UUID
	LikedPostIDs       []uuid.UUID
	PublishedPostIDs   []uuid.UUID
	CommentIDs         []uuid.UUID
	APIKeyIDs          []uuid.UUID
}

// Mutate applies the CreateUserInput on the UserMutation builder.
func (i *CreateUserInput) Mutate(m *UserMutation) {
	m.SetDisplayName(i.DisplayName)
	if v := i.Alias; v != nil {
		m.SetAlias(*v)
	}
	if v := i.ProfileImage; v != nil {
		m.SetProfileImage(*v)
	}
	if v := i.AuthProvider; v != nil {
		m.SetAuthProvider(*v)
	}
	if v := i.Role; v != nil {
		m.SetRole(*v)
	}
	if v := i.LastSeenAt; v != nil {
		m.SetLastSeenAt(*v)
	}
	if v := i.LastPostSeenCursor; v != nil {
		m.SetLastPostSeenCursor(*v)
	}
	if v := i.Awards; v != nil {
		m.SetAwards(v)
	}
	if v := i.SavedPostIDs; len(v) > 0 {
		m.AddSavedPostIDs(v...)
	}
	if v := i.LikedPostIDs; len(v) > 0 {
		m.AddLikedPostIDs(v...)
	}
	if v := i.PublishedPostIDs; len(v) > 0 {
		m.AddPublishedPostIDs(v...)
	}
	if v := i.CommentIDs; len(v) > 0 {
		m.AddCommentIDs(v...)
	}
	if v := i.APIKeyIDs; len(v) > 0 {
		m.AddAPIKeyIDs(v...)
	}
}

// SetInput applies the change-set in the CreateUserInput on the UserCreate builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	DisplayName             *string
	ClearAlias              bool
	Alias                   *string
	ClearProfileImage       bool
	ProfileImage            *string
	AuthProvider            *user.AuthProvider
	Role                    *user.Role
	ClearLastSeenAt         bool
	LastSeenAt              *time.Time
	ClearLastPostSeenCursor bool
	LastPostSeenCursor      *string
	ClearAwards             bool
	Awards                  []string
	AppendAwards            []string
	ClearSavedPosts         bool
	AddSavedPostIDs         []uuid.UUID
	RemoveSavedPostIDs      []uuid.UUID
	ClearLikedPosts         bool
	AddLikedPostIDs         []uuid.UUID
	RemoveLikedPostIDs      []uuid.UUID
	ClearPublishedPosts     bool
	AddPublishedPostIDs     []uuid.UUID
	RemovePublishedPostIDs  []uuid.UUID
	ClearComments           bool
	AddCommentIDs           []uuid.UUID
	RemoveCommentIDs        []uuid.UUID
	ClearAPIKeys            bool
	AddAPIKeyIDs            []uuid.UUID
	RemoveAPIKeyIDs         []uuid.UUID
}

// Mutate applies the UpdateUserInput on the UserMutation builder.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAlias {
		m.ClearAlias()
	}
	if v := i.Alias; v != nil {
		m.SetAlias(*v)
	}
	if i.ClearProfileImage {
		m.ClearProfileImage()
	}
	if v := i.ProfileImage; v != nil {
		m.SetProfileImage(*v)
	}
	if v := i.AuthProvider; v != nil {
		m.SetAuthProvider(*v)
	}
	if v := i.Role; v != nil {
		m.SetRole(*v)
	}
	if i.ClearLastSeenAt {
		m.ClearLastSeenAt()
	}
	if v := i.LastSeenAt; v != nil {
		m.SetLastSeenAt(*v)
	}
	if i.ClearLastPostSeenCursor {
		m.ClearLastPostSeenCursor()
	}
	if v := i.LastPostSeenCursor; v != nil {
		m.SetLastPostSeenCursor(*v)
	}
	if i.ClearAwards {
		m.ClearAwards()
	}
	if v := i.Awards; v != nil {
		m.SetAwards(v)
	}
	if i.AppendAwards != nil {
		m.AppendAwards(i.Awards)
	}
	if i.ClearSavedPosts {
		m.ClearSavedPosts()
	}
	if v := i.AddSavedPostIDs; len(v) > 0 {
		m.AddSavedPostIDs(v...)
	}
	if v := i.RemoveSavedPostIDs; len(v) > 0 {
		m.RemoveSavedPostIDs(v...)
	}
	if i.ClearLikedPosts {
		m.ClearLikedPosts()
	}
	if v := i.AddLikedPostIDs; len(v) > 0 {
		m.AddLikedPostIDs(v...)
	}
	if v := i.RemoveLikedPostIDs; len(v) > 0 {
		m.RemoveLikedPostIDs(v...)
	}
	if i.ClearPublishedPosts {
		m.ClearPublishedPosts()
	}
	if v := i.AddPublishedPostIDs; len(v) > 0 {
		m.AddPublishedPostIDs(v...)
	}
	if v := i.RemovePublishedPostIDs; len(v) > 0 {
		m.RemovePublishedPostIDs(v...)
	}
	if i.ClearComments {
		m.ClearComments()
	}
	if v := i.AddCommentIDs; len(v) > 0 {
		m.AddCommentIDs(v...)
	}
	if v := i.RemoveCommentIDs; len(v) > 0 {
		m.RemoveCommentIDs(v...)
	}
	if i.ClearAPIKeys {
		m.ClearAPIKeys()
	}
	if v := i.AddAPIKeyIDs; len(v) > 0 {
		m.AddAPIKeyIDs(v...)
	}
	if v := i.RemoveAPIKeyIDs; len(v) > 0 {
		m.RemoveAPIKeyIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdate builder.
func (c *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdateOne builder.
func (c *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
