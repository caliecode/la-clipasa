// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/caliecode/la-clipasa/internal/ent/generated/post"
	"github.com/caliecode/la-clipasa/internal/ent/generated/postcategory"
)

// PostCategoryCreate is the builder for creating a PostCategory entity.
type PostCategoryCreate struct {
	config
	mutation *PostCategoryMutation
	hooks    []Hook
}

// SetUpdatedAt sets the "updated_at" field.
func (pcc *PostCategoryCreate) SetUpdatedAt(t time.Time) *PostCategoryCreate {
	pcc.mutation.SetUpdatedAt(t)
	return pcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pcc *PostCategoryCreate) SetNillableUpdatedAt(t *time.Time) *PostCategoryCreate {
	if t != nil {
		pcc.SetUpdatedAt(*t)
	}
	return pcc
}

// SetCreatedAt sets the "created_at" field.
func (pcc *PostCategoryCreate) SetCreatedAt(t time.Time) *PostCategoryCreate {
	pcc.mutation.SetCreatedAt(t)
	return pcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pcc *PostCategoryCreate) SetNillableCreatedAt(t *time.Time) *PostCategoryCreate {
	if t != nil {
		pcc.SetCreatedAt(*t)
	}
	return pcc
}

// SetCategory sets the "category" field.
func (pcc *PostCategoryCreate) SetCategory(po postcategory.Category) *PostCategoryCreate {
	pcc.mutation.SetCategory(po)
	return pcc
}

// SetID sets the "id" field.
func (pcc *PostCategoryCreate) SetID(u uuid.UUID) *PostCategoryCreate {
	pcc.mutation.SetID(u)
	return pcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pcc *PostCategoryCreate) SetNillableID(u *uuid.UUID) *PostCategoryCreate {
	if u != nil {
		pcc.SetID(*u)
	}
	return pcc
}

// SetPostID sets the "post" edge to the Post entity by ID.
func (pcc *PostCategoryCreate) SetPostID(id uuid.UUID) *PostCategoryCreate {
	pcc.mutation.SetPostID(id)
	return pcc
}

// SetNillablePostID sets the "post" edge to the Post entity by ID if the given value is not nil.
func (pcc *PostCategoryCreate) SetNillablePostID(id *uuid.UUID) *PostCategoryCreate {
	if id != nil {
		pcc = pcc.SetPostID(*id)
	}
	return pcc
}

// SetPost sets the "post" edge to the Post entity.
func (pcc *PostCategoryCreate) SetPost(p *Post) *PostCategoryCreate {
	return pcc.SetPostID(p.ID)
}

// Mutation returns the PostCategoryMutation object of the builder.
func (pcc *PostCategoryCreate) Mutation() *PostCategoryMutation {
	return pcc.mutation
}

// Save creates the PostCategory in the database.
func (pcc *PostCategoryCreate) Save(ctx context.Context) (*PostCategory, error) {
	pcc.defaults()
	return withHooks(ctx, pcc.sqlSave, pcc.mutation, pcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pcc *PostCategoryCreate) SaveX(ctx context.Context) *PostCategory {
	v, err := pcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcc *PostCategoryCreate) Exec(ctx context.Context) error {
	_, err := pcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcc *PostCategoryCreate) ExecX(ctx context.Context) {
	if err := pcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcc *PostCategoryCreate) defaults() {
	if _, ok := pcc.mutation.UpdatedAt(); !ok {
		v := postcategory.DefaultUpdatedAt()
		pcc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pcc.mutation.CreatedAt(); !ok {
		v := postcategory.DefaultCreatedAt()
		pcc.mutation.SetCreatedAt(v)
	}
	if _, ok := pcc.mutation.ID(); !ok {
		v := postcategory.DefaultID()
		pcc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcc *PostCategoryCreate) check() error {
	if _, ok := pcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "PostCategory.updated_at"`)}
	}
	if _, ok := pcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "PostCategory.created_at"`)}
	}
	if _, ok := pcc.mutation.Category(); !ok {
		return &ValidationError{Name: "category", err: errors.New(`generated: missing required field "PostCategory.category"`)}
	}
	if v, ok := pcc.mutation.Category(); ok {
		if err := postcategory.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`generated: validator failed for field "PostCategory.category": %w`, err)}
		}
	}
	return nil
}

func (pcc *PostCategoryCreate) sqlSave(ctx context.Context) (*PostCategory, error) {
	if err := pcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pcc.mutation.id = &_node.ID
	pcc.mutation.done = true
	return _node, nil
}

func (pcc *PostCategoryCreate) createSpec() (*PostCategory, *sqlgraph.CreateSpec) {
	var (
		_node = &PostCategory{config: pcc.config}
		_spec = sqlgraph.NewCreateSpec(postcategory.Table, sqlgraph.NewFieldSpec(postcategory.FieldID, field.TypeUUID))
	)
	if id, ok := pcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pcc.mutation.UpdatedAt(); ok {
		_spec.SetField(postcategory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pcc.mutation.CreatedAt(); ok {
		_spec.SetField(postcategory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pcc.mutation.Category(); ok {
		_spec.SetField(postcategory.FieldCategory, field.TypeEnum, value)
		_node.Category = value
	}
	if nodes := pcc.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   postcategory.PostTable,
			Columns: []string{postcategory.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.post_categories = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PostCategoryCreateBulk is the builder for creating many PostCategory entities in bulk.
type PostCategoryCreateBulk struct {
	config
	err      error
	builders []*PostCategoryCreate
}

// Save creates the PostCategory entities in the database.
func (pccb *PostCategoryCreateBulk) Save(ctx context.Context) ([]*PostCategory, error) {
	if pccb.err != nil {
		return nil, pccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pccb.builders))
	nodes := make([]*PostCategory, len(pccb.builders))
	mutators := make([]Mutator, len(pccb.builders))
	for i := range pccb.builders {
		func(i int, root context.Context) {
			builder := pccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PostCategoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pccb *PostCategoryCreateBulk) SaveX(ctx context.Context) []*PostCategory {
	v, err := pccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pccb *PostCategoryCreateBulk) Exec(ctx context.Context) error {
	_, err := pccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pccb *PostCategoryCreateBulk) ExecX(ctx context.Context) {
	if err := pccb.Exec(ctx); err != nil {
		panic(err)
	}
}
