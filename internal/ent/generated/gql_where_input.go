// Code generated by ent, DO NOT EDIT.

package generated

import (
	"errors"
	"fmt"
	"time"

	"github.com/caliecode/la-clipasa/internal/ent/generated/apikey"
	"github.com/caliecode/la-clipasa/internal/ent/generated/comment"
	"github.com/caliecode/la-clipasa/internal/ent/generated/post"
	"github.com/caliecode/la-clipasa/internal/ent/generated/postcategory"
	"github.com/caliecode/la-clipasa/internal/ent/generated/predicate"
	"github.com/caliecode/la-clipasa/internal/ent/generated/user"
	"github.com/google/uuid"
)

// ApiKeyWhereInput represents a where input for filtering ApiKey queries.
type ApiKeyWhereInput struct {
	Predicates []predicate.ApiKey  `json:"-"`
	Not        *ApiKeyWhereInput   `json:"not,omitempty"`
	Or         []*ApiKeyWhereInput `json:"or,omitempty"`
	And        []*ApiKeyWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *uuid.UUID  `json:"id,omitempty"`
	IDNEQ   *uuid.UUID  `json:"idNEQ,omitempty"`
	IDIn    []uuid.UUID `json:"idIn,omitempty"`
	IDNotIn []uuid.UUID `json:"idNotIn,omitempty"`
	IDGT    *uuid.UUID  `json:"idGT,omitempty"`
	IDGTE   *uuid.UUID  `json:"idGTE,omitempty"`
	IDLT    *uuid.UUID  `json:"idLT,omitempty"`
	IDLTE   *uuid.UUID  `json:"idLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "api_key" field predicates.
	APIKey             *string  `json:"apiKey,omitempty"`
	APIKeyNEQ          *string  `json:"apiKeyNEQ,omitempty"`
	APIKeyIn           []string `json:"apiKeyIn,omitempty"`
	APIKeyNotIn        []string `json:"apiKeyNotIn,omitempty"`
	APIKeyGT           *string  `json:"apiKeyGT,omitempty"`
	APIKeyGTE          *string  `json:"apiKeyGTE,omitempty"`
	APIKeyLT           *string  `json:"apiKeyLT,omitempty"`
	APIKeyLTE          *string  `json:"apiKeyLTE,omitempty"`
	APIKeyContains     *string  `json:"apiKeyContains,omitempty"`
	APIKeyHasPrefix    *string  `json:"apiKeyHasPrefix,omitempty"`
	APIKeyHasSuffix    *string  `json:"apiKeyHasSuffix,omitempty"`
	APIKeyEqualFold    *string  `json:"apiKeyEqualFold,omitempty"`
	APIKeyContainsFold *string  `json:"apiKeyContainsFold,omitempty"`

	// "expires_on" field predicates.
	ExpiresOn      *time.Time  `json:"expiresOn,omitempty"`
	ExpiresOnNEQ   *time.Time  `json:"expiresOnNEQ,omitempty"`
	ExpiresOnIn    []time.Time `json:"expiresOnIn,omitempty"`
	ExpiresOnNotIn []time.Time `json:"expiresOnNotIn,omitempty"`
	ExpiresOnGT    *time.Time  `json:"expiresOnGT,omitempty"`
	ExpiresOnGTE   *time.Time  `json:"expiresOnGTE,omitempty"`
	ExpiresOnLT    *time.Time  `json:"expiresOnLT,omitempty"`
	ExpiresOnLTE   *time.Time  `json:"expiresOnLTE,omitempty"`

	// "owner" edge predicates.
	HasOwner     *bool             `json:"hasOwner,omitempty"`
	HasOwnerWith []*UserWhereInput `json:"hasOwnerWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *ApiKeyWhereInput) AddPredicates(predicates ...predicate.ApiKey) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the ApiKeyWhereInput filter on the ApiKeyQuery builder.
func (i *ApiKeyWhereInput) Filter(q *ApiKeyQuery) (*ApiKeyQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyApiKeyWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyApiKeyWhereInput is returned in case the ApiKeyWhereInput is empty.
var ErrEmptyApiKeyWhereInput = errors.New("generated: empty predicate ApiKeyWhereInput")

// P returns a predicate for filtering apikeys.
// An error is returned if the input is empty or invalid.
func (i *ApiKeyWhereInput) P() (predicate.ApiKey, error) {
	var predicates []predicate.ApiKey
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, apikey.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.ApiKey, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, apikey.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.ApiKey, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, apikey.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, apikey.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, apikey.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, apikey.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, apikey.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, apikey.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, apikey.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, apikey.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, apikey.IDLTE(*i.IDLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, apikey.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, apikey.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, apikey.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, apikey.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, apikey.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, apikey.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, apikey.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, apikey.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, apikey.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, apikey.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, apikey.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, apikey.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, apikey.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, apikey.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, apikey.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, apikey.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.APIKey != nil {
		predicates = append(predicates, apikey.APIKeyEQ(*i.APIKey))
	}
	if i.APIKeyNEQ != nil {
		predicates = append(predicates, apikey.APIKeyNEQ(*i.APIKeyNEQ))
	}
	if len(i.APIKeyIn) > 0 {
		predicates = append(predicates, apikey.APIKeyIn(i.APIKeyIn...))
	}
	if len(i.APIKeyNotIn) > 0 {
		predicates = append(predicates, apikey.APIKeyNotIn(i.APIKeyNotIn...))
	}
	if i.APIKeyGT != nil {
		predicates = append(predicates, apikey.APIKeyGT(*i.APIKeyGT))
	}
	if i.APIKeyGTE != nil {
		predicates = append(predicates, apikey.APIKeyGTE(*i.APIKeyGTE))
	}
	if i.APIKeyLT != nil {
		predicates = append(predicates, apikey.APIKeyLT(*i.APIKeyLT))
	}
	if i.APIKeyLTE != nil {
		predicates = append(predicates, apikey.APIKeyLTE(*i.APIKeyLTE))
	}
	if i.APIKeyContains != nil {
		predicates = append(predicates, apikey.APIKeyContains(*i.APIKeyContains))
	}
	if i.APIKeyHasPrefix != nil {
		predicates = append(predicates, apikey.APIKeyHasPrefix(*i.APIKeyHasPrefix))
	}
	if i.APIKeyHasSuffix != nil {
		predicates = append(predicates, apikey.APIKeyHasSuffix(*i.APIKeyHasSuffix))
	}
	if i.APIKeyEqualFold != nil {
		predicates = append(predicates, apikey.APIKeyEqualFold(*i.APIKeyEqualFold))
	}
	if i.APIKeyContainsFold != nil {
		predicates = append(predicates, apikey.APIKeyContainsFold(*i.APIKeyContainsFold))
	}
	if i.ExpiresOn != nil {
		predicates = append(predicates, apikey.ExpiresOnEQ(*i.ExpiresOn))
	}
	if i.ExpiresOnNEQ != nil {
		predicates = append(predicates, apikey.ExpiresOnNEQ(*i.ExpiresOnNEQ))
	}
	if len(i.ExpiresOnIn) > 0 {
		predicates = append(predicates, apikey.ExpiresOnIn(i.ExpiresOnIn...))
	}
	if len(i.ExpiresOnNotIn) > 0 {
		predicates = append(predicates, apikey.ExpiresOnNotIn(i.ExpiresOnNotIn...))
	}
	if i.ExpiresOnGT != nil {
		predicates = append(predicates, apikey.ExpiresOnGT(*i.ExpiresOnGT))
	}
	if i.ExpiresOnGTE != nil {
		predicates = append(predicates, apikey.ExpiresOnGTE(*i.ExpiresOnGTE))
	}
	if i.ExpiresOnLT != nil {
		predicates = append(predicates, apikey.ExpiresOnLT(*i.ExpiresOnLT))
	}
	if i.ExpiresOnLTE != nil {
		predicates = append(predicates, apikey.ExpiresOnLTE(*i.ExpiresOnLTE))
	}

	if i.HasOwner != nil {
		p := apikey.HasOwner()
		if !*i.HasOwner {
			p = apikey.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasOwnerWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasOwnerWith))
		for _, w := range i.HasOwnerWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasOwnerWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, apikey.HasOwnerWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyApiKeyWhereInput
	case 1:
		return predicates[0], nil
	default:
		return apikey.And(predicates...), nil
	}
}

// CommentWhereInput represents a where input for filtering Comment queries.
type CommentWhereInput struct {
	Predicates []predicate.Comment  `json:"-"`
	Not        *CommentWhereInput   `json:"not,omitempty"`
	Or         []*CommentWhereInput `json:"or,omitempty"`
	And        []*CommentWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *uuid.UUID  `json:"id,omitempty"`
	IDNEQ   *uuid.UUID  `json:"idNEQ,omitempty"`
	IDIn    []uuid.UUID `json:"idIn,omitempty"`
	IDNotIn []uuid.UUID `json:"idNotIn,omitempty"`
	IDGT    *uuid.UUID  `json:"idGT,omitempty"`
	IDGTE   *uuid.UUID  `json:"idGTE,omitempty"`
	IDLT    *uuid.UUID  `json:"idLT,omitempty"`
	IDLTE   *uuid.UUID  `json:"idLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt       *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ    *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT     *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE    *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT     *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE    *time.Time  `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil bool        `json:"deletedAtNotNil,omitempty"`

	// "deleted_by" field predicates.
	DeletedBy             *string  `json:"deletedBy,omitempty"`
	DeletedByNEQ          *string  `json:"deletedByNEQ,omitempty"`
	DeletedByIn           []string `json:"deletedByIn,omitempty"`
	DeletedByNotIn        []string `json:"deletedByNotIn,omitempty"`
	DeletedByGT           *string  `json:"deletedByGT,omitempty"`
	DeletedByGTE          *string  `json:"deletedByGTE,omitempty"`
	DeletedByLT           *string  `json:"deletedByLT,omitempty"`
	DeletedByLTE          *string  `json:"deletedByLTE,omitempty"`
	DeletedByContains     *string  `json:"deletedByContains,omitempty"`
	DeletedByHasPrefix    *string  `json:"deletedByHasPrefix,omitempty"`
	DeletedByHasSuffix    *string  `json:"deletedByHasSuffix,omitempty"`
	DeletedByIsNil        bool     `json:"deletedByIsNil,omitempty"`
	DeletedByNotNil       bool     `json:"deletedByNotNil,omitempty"`
	DeletedByEqualFold    *string  `json:"deletedByEqualFold,omitempty"`
	DeletedByContainsFold *string  `json:"deletedByContainsFold,omitempty"`

	// "content" field predicates.
	Content             *string  `json:"content,omitempty"`
	ContentNEQ          *string  `json:"contentNEQ,omitempty"`
	ContentIn           []string `json:"contentIn,omitempty"`
	ContentNotIn        []string `json:"contentNotIn,omitempty"`
	ContentGT           *string  `json:"contentGT,omitempty"`
	ContentGTE          *string  `json:"contentGTE,omitempty"`
	ContentLT           *string  `json:"contentLT,omitempty"`
	ContentLTE          *string  `json:"contentLTE,omitempty"`
	ContentContains     *string  `json:"contentContains,omitempty"`
	ContentHasPrefix    *string  `json:"contentHasPrefix,omitempty"`
	ContentHasSuffix    *string  `json:"contentHasSuffix,omitempty"`
	ContentEqualFold    *string  `json:"contentEqualFold,omitempty"`
	ContentContainsFold *string  `json:"contentContainsFold,omitempty"`

	// "owner" edge predicates.
	HasOwner     *bool             `json:"hasOwner,omitempty"`
	HasOwnerWith []*UserWhereInput `json:"hasOwnerWith,omitempty"`

	// "post" edge predicates.
	HasPost     *bool             `json:"hasPost,omitempty"`
	HasPostWith []*PostWhereInput `json:"hasPostWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *CommentWhereInput) AddPredicates(predicates ...predicate.Comment) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the CommentWhereInput filter on the CommentQuery builder.
func (i *CommentWhereInput) Filter(q *CommentQuery) (*CommentQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyCommentWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyCommentWhereInput is returned in case the CommentWhereInput is empty.
var ErrEmptyCommentWhereInput = errors.New("generated: empty predicate CommentWhereInput")

// P returns a predicate for filtering comments.
// An error is returned if the input is empty or invalid.
func (i *CommentWhereInput) P() (predicate.Comment, error) {
	var predicates []predicate.Comment
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, comment.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Comment, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, comment.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Comment, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, comment.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, comment.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, comment.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, comment.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, comment.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, comment.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, comment.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, comment.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, comment.IDLTE(*i.IDLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, comment.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, comment.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, comment.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, comment.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, comment.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, comment.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, comment.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, comment.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, comment.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, comment.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, comment.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, comment.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, comment.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, comment.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, comment.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, comment.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, comment.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, comment.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, comment.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, comment.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, comment.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, comment.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, comment.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, comment.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.DeletedAtIsNil {
		predicates = append(predicates, comment.DeletedAtIsNil())
	}
	if i.DeletedAtNotNil {
		predicates = append(predicates, comment.DeletedAtNotNil())
	}
	if i.DeletedBy != nil {
		predicates = append(predicates, comment.DeletedByEQ(*i.DeletedBy))
	}
	if i.DeletedByNEQ != nil {
		predicates = append(predicates, comment.DeletedByNEQ(*i.DeletedByNEQ))
	}
	if len(i.DeletedByIn) > 0 {
		predicates = append(predicates, comment.DeletedByIn(i.DeletedByIn...))
	}
	if len(i.DeletedByNotIn) > 0 {
		predicates = append(predicates, comment.DeletedByNotIn(i.DeletedByNotIn...))
	}
	if i.DeletedByGT != nil {
		predicates = append(predicates, comment.DeletedByGT(*i.DeletedByGT))
	}
	if i.DeletedByGTE != nil {
		predicates = append(predicates, comment.DeletedByGTE(*i.DeletedByGTE))
	}
	if i.DeletedByLT != nil {
		predicates = append(predicates, comment.DeletedByLT(*i.DeletedByLT))
	}
	if i.DeletedByLTE != nil {
		predicates = append(predicates, comment.DeletedByLTE(*i.DeletedByLTE))
	}
	if i.DeletedByContains != nil {
		predicates = append(predicates, comment.DeletedByContains(*i.DeletedByContains))
	}
	if i.DeletedByHasPrefix != nil {
		predicates = append(predicates, comment.DeletedByHasPrefix(*i.DeletedByHasPrefix))
	}
	if i.DeletedByHasSuffix != nil {
		predicates = append(predicates, comment.DeletedByHasSuffix(*i.DeletedByHasSuffix))
	}
	if i.DeletedByIsNil {
		predicates = append(predicates, comment.DeletedByIsNil())
	}
	if i.DeletedByNotNil {
		predicates = append(predicates, comment.DeletedByNotNil())
	}
	if i.DeletedByEqualFold != nil {
		predicates = append(predicates, comment.DeletedByEqualFold(*i.DeletedByEqualFold))
	}
	if i.DeletedByContainsFold != nil {
		predicates = append(predicates, comment.DeletedByContainsFold(*i.DeletedByContainsFold))
	}
	if i.Content != nil {
		predicates = append(predicates, comment.ContentEQ(*i.Content))
	}
	if i.ContentNEQ != nil {
		predicates = append(predicates, comment.ContentNEQ(*i.ContentNEQ))
	}
	if len(i.ContentIn) > 0 {
		predicates = append(predicates, comment.ContentIn(i.ContentIn...))
	}
	if len(i.ContentNotIn) > 0 {
		predicates = append(predicates, comment.ContentNotIn(i.ContentNotIn...))
	}
	if i.ContentGT != nil {
		predicates = append(predicates, comment.ContentGT(*i.ContentGT))
	}
	if i.ContentGTE != nil {
		predicates = append(predicates, comment.ContentGTE(*i.ContentGTE))
	}
	if i.ContentLT != nil {
		predicates = append(predicates, comment.ContentLT(*i.ContentLT))
	}
	if i.ContentLTE != nil {
		predicates = append(predicates, comment.ContentLTE(*i.ContentLTE))
	}
	if i.ContentContains != nil {
		predicates = append(predicates, comment.ContentContains(*i.ContentContains))
	}
	if i.ContentHasPrefix != nil {
		predicates = append(predicates, comment.ContentHasPrefix(*i.ContentHasPrefix))
	}
	if i.ContentHasSuffix != nil {
		predicates = append(predicates, comment.ContentHasSuffix(*i.ContentHasSuffix))
	}
	if i.ContentEqualFold != nil {
		predicates = append(predicates, comment.ContentEqualFold(*i.ContentEqualFold))
	}
	if i.ContentContainsFold != nil {
		predicates = append(predicates, comment.ContentContainsFold(*i.ContentContainsFold))
	}

	if i.HasOwner != nil {
		p := comment.HasOwner()
		if !*i.HasOwner {
			p = comment.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasOwnerWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasOwnerWith))
		for _, w := range i.HasOwnerWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasOwnerWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, comment.HasOwnerWith(with...))
	}
	if i.HasPost != nil {
		p := comment.HasPost()
		if !*i.HasPost {
			p = comment.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasPostWith) > 0 {
		with := make([]predicate.Post, 0, len(i.HasPostWith))
		for _, w := range i.HasPostWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasPostWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, comment.HasPostWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyCommentWhereInput
	case 1:
		return predicates[0], nil
	default:
		return comment.And(predicates...), nil
	}
}

// PostWhereInput represents a where input for filtering Post queries.
type PostWhereInput struct {
	Predicates []predicate.Post  `json:"-"`
	Not        *PostWhereInput   `json:"not,omitempty"`
	Or         []*PostWhereInput `json:"or,omitempty"`
	And        []*PostWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *uuid.UUID  `json:"id,omitempty"`
	IDNEQ   *uuid.UUID  `json:"idNEQ,omitempty"`
	IDIn    []uuid.UUID `json:"idIn,omitempty"`
	IDNotIn []uuid.UUID `json:"idNotIn,omitempty"`
	IDGT    *uuid.UUID  `json:"idGT,omitempty"`
	IDGTE   *uuid.UUID  `json:"idGTE,omitempty"`
	IDLT    *uuid.UUID  `json:"idLT,omitempty"`
	IDLTE   *uuid.UUID  `json:"idLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt       *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ    *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT     *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE    *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT     *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE    *time.Time  `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil bool        `json:"deletedAtNotNil,omitempty"`

	// "deleted_by" field predicates.
	DeletedBy             *string  `json:"deletedBy,omitempty"`
	DeletedByNEQ          *string  `json:"deletedByNEQ,omitempty"`
	DeletedByIn           []string `json:"deletedByIn,omitempty"`
	DeletedByNotIn        []string `json:"deletedByNotIn,omitempty"`
	DeletedByGT           *string  `json:"deletedByGT,omitempty"`
	DeletedByGTE          *string  `json:"deletedByGTE,omitempty"`
	DeletedByLT           *string  `json:"deletedByLT,omitempty"`
	DeletedByLTE          *string  `json:"deletedByLTE,omitempty"`
	DeletedByContains     *string  `json:"deletedByContains,omitempty"`
	DeletedByHasPrefix    *string  `json:"deletedByHasPrefix,omitempty"`
	DeletedByHasSuffix    *string  `json:"deletedByHasSuffix,omitempty"`
	DeletedByIsNil        bool     `json:"deletedByIsNil,omitempty"`
	DeletedByNotNil       bool     `json:"deletedByNotNil,omitempty"`
	DeletedByEqualFold    *string  `json:"deletedByEqualFold,omitempty"`
	DeletedByContainsFold *string  `json:"deletedByContainsFold,omitempty"`

	// "pinned" field predicates.
	Pinned    *bool `json:"pinned,omitempty"`
	PinnedNEQ *bool `json:"pinnedNEQ,omitempty"`

	// "title" field predicates.
	Title             *string  `json:"title,omitempty"`
	TitleNEQ          *string  `json:"titleNEQ,omitempty"`
	TitleIn           []string `json:"titleIn,omitempty"`
	TitleNotIn        []string `json:"titleNotIn,omitempty"`
	TitleGT           *string  `json:"titleGT,omitempty"`
	TitleGTE          *string  `json:"titleGTE,omitempty"`
	TitleLT           *string  `json:"titleLT,omitempty"`
	TitleLTE          *string  `json:"titleLTE,omitempty"`
	TitleContains     *string  `json:"titleContains,omitempty"`
	TitleHasPrefix    *string  `json:"titleHasPrefix,omitempty"`
	TitleHasSuffix    *string  `json:"titleHasSuffix,omitempty"`
	TitleEqualFold    *string  `json:"titleEqualFold,omitempty"`
	TitleContainsFold *string  `json:"titleContainsFold,omitempty"`

	// "content" field predicates.
	Content             *string  `json:"content,omitempty"`
	ContentNEQ          *string  `json:"contentNEQ,omitempty"`
	ContentIn           []string `json:"contentIn,omitempty"`
	ContentNotIn        []string `json:"contentNotIn,omitempty"`
	ContentGT           *string  `json:"contentGT,omitempty"`
	ContentGTE          *string  `json:"contentGTE,omitempty"`
	ContentLT           *string  `json:"contentLT,omitempty"`
	ContentLTE          *string  `json:"contentLTE,omitempty"`
	ContentContains     *string  `json:"contentContains,omitempty"`
	ContentHasPrefix    *string  `json:"contentHasPrefix,omitempty"`
	ContentHasSuffix    *string  `json:"contentHasSuffix,omitempty"`
	ContentIsNil        bool     `json:"contentIsNil,omitempty"`
	ContentNotNil       bool     `json:"contentNotNil,omitempty"`
	ContentEqualFold    *string  `json:"contentEqualFold,omitempty"`
	ContentContainsFold *string  `json:"contentContainsFold,omitempty"`

	// "link" field predicates.
	Link             *string  `json:"link,omitempty"`
	LinkNEQ          *string  `json:"linkNEQ,omitempty"`
	LinkIn           []string `json:"linkIn,omitempty"`
	LinkNotIn        []string `json:"linkNotIn,omitempty"`
	LinkGT           *string  `json:"linkGT,omitempty"`
	LinkGTE          *string  `json:"linkGTE,omitempty"`
	LinkLT           *string  `json:"linkLT,omitempty"`
	LinkLTE          *string  `json:"linkLTE,omitempty"`
	LinkContains     *string  `json:"linkContains,omitempty"`
	LinkHasPrefix    *string  `json:"linkHasPrefix,omitempty"`
	LinkHasSuffix    *string  `json:"linkHasSuffix,omitempty"`
	LinkEqualFold    *string  `json:"linkEqualFold,omitempty"`
	LinkContainsFold *string  `json:"linkContainsFold,omitempty"`

	// "moderation_comment" field predicates.
	ModerationComment             *string  `json:"moderationComment,omitempty"`
	ModerationCommentNEQ          *string  `json:"moderationCommentNEQ,omitempty"`
	ModerationCommentIn           []string `json:"moderationCommentIn,omitempty"`
	ModerationCommentNotIn        []string `json:"moderationCommentNotIn,omitempty"`
	ModerationCommentGT           *string  `json:"moderationCommentGT,omitempty"`
	ModerationCommentGTE          *string  `json:"moderationCommentGTE,omitempty"`
	ModerationCommentLT           *string  `json:"moderationCommentLT,omitempty"`
	ModerationCommentLTE          *string  `json:"moderationCommentLTE,omitempty"`
	ModerationCommentContains     *string  `json:"moderationCommentContains,omitempty"`
	ModerationCommentHasPrefix    *string  `json:"moderationCommentHasPrefix,omitempty"`
	ModerationCommentHasSuffix    *string  `json:"moderationCommentHasSuffix,omitempty"`
	ModerationCommentIsNil        bool     `json:"moderationCommentIsNil,omitempty"`
	ModerationCommentNotNil       bool     `json:"moderationCommentNotNil,omitempty"`
	ModerationCommentEqualFold    *string  `json:"moderationCommentEqualFold,omitempty"`
	ModerationCommentContainsFold *string  `json:"moderationCommentContainsFold,omitempty"`

	// "is_moderated" field predicates.
	IsModerated    *bool `json:"isModerated,omitempty"`
	IsModeratedNEQ *bool `json:"isModeratedNEQ,omitempty"`

	// "entity_vector" field predicates.
	EntityVector             *string  `json:"entityVector,omitempty"`
	EntityVectorNEQ          *string  `json:"entityVectorNEQ,omitempty"`
	EntityVectorIn           []string `json:"entityVectorIn,omitempty"`
	EntityVectorNotIn        []string `json:"entityVectorNotIn,omitempty"`
	EntityVectorGT           *string  `json:"entityVectorGT,omitempty"`
	EntityVectorGTE          *string  `json:"entityVectorGTE,omitempty"`
	EntityVectorLT           *string  `json:"entityVectorLT,omitempty"`
	EntityVectorLTE          *string  `json:"entityVectorLTE,omitempty"`
	EntityVectorContains     *string  `json:"entityVectorContains,omitempty"`
	EntityVectorHasPrefix    *string  `json:"entityVectorHasPrefix,omitempty"`
	EntityVectorHasSuffix    *string  `json:"entityVectorHasSuffix,omitempty"`
	EntityVectorIsNil        bool     `json:"entityVectorIsNil,omitempty"`
	EntityVectorNotNil       bool     `json:"entityVectorNotNil,omitempty"`
	EntityVectorEqualFold    *string  `json:"entityVectorEqualFold,omitempty"`
	EntityVectorContainsFold *string  `json:"entityVectorContainsFold,omitempty"`

	// "owner" edge predicates.
	HasOwner     *bool             `json:"hasOwner,omitempty"`
	HasOwnerWith []*UserWhereInput `json:"hasOwnerWith,omitempty"`

	// "comments" edge predicates.
	HasComments     *bool                `json:"hasComments,omitempty"`
	HasCommentsWith []*CommentWhereInput `json:"hasCommentsWith,omitempty"`

	// "saved_by" edge predicates.
	HasSavedBy     *bool             `json:"hasSavedBy,omitempty"`
	HasSavedByWith []*UserWhereInput `json:"hasSavedByWith,omitempty"`

	// "liked_by" edge predicates.
	HasLikedBy     *bool             `json:"hasLikedBy,omitempty"`
	HasLikedByWith []*UserWhereInput `json:"hasLikedByWith,omitempty"`

	// "categories" edge predicates.
	HasCategories     *bool                     `json:"hasCategories,omitempty"`
	HasCategoriesWith []*PostCategoryWhereInput `json:"hasCategoriesWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *PostWhereInput) AddPredicates(predicates ...predicate.Post) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the PostWhereInput filter on the PostQuery builder.
func (i *PostWhereInput) Filter(q *PostQuery) (*PostQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyPostWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyPostWhereInput is returned in case the PostWhereInput is empty.
var ErrEmptyPostWhereInput = errors.New("generated: empty predicate PostWhereInput")

// P returns a predicate for filtering posts.
// An error is returned if the input is empty or invalid.
func (i *PostWhereInput) P() (predicate.Post, error) {
	var predicates []predicate.Post
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, post.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Post, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, post.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Post, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, post.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, post.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, post.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, post.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, post.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, post.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, post.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, post.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, post.IDLTE(*i.IDLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, post.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, post.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, post.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, post.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, post.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, post.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, post.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, post.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, post.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, post.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, post.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, post.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, post.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, post.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, post.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, post.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, post.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, post.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, post.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, post.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, post.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, post.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, post.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, post.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.DeletedAtIsNil {
		predicates = append(predicates, post.DeletedAtIsNil())
	}
	if i.DeletedAtNotNil {
		predicates = append(predicates, post.DeletedAtNotNil())
	}
	if i.DeletedBy != nil {
		predicates = append(predicates, post.DeletedByEQ(*i.DeletedBy))
	}
	if i.DeletedByNEQ != nil {
		predicates = append(predicates, post.DeletedByNEQ(*i.DeletedByNEQ))
	}
	if len(i.DeletedByIn) > 0 {
		predicates = append(predicates, post.DeletedByIn(i.DeletedByIn...))
	}
	if len(i.DeletedByNotIn) > 0 {
		predicates = append(predicates, post.DeletedByNotIn(i.DeletedByNotIn...))
	}
	if i.DeletedByGT != nil {
		predicates = append(predicates, post.DeletedByGT(*i.DeletedByGT))
	}
	if i.DeletedByGTE != nil {
		predicates = append(predicates, post.DeletedByGTE(*i.DeletedByGTE))
	}
	if i.DeletedByLT != nil {
		predicates = append(predicates, post.DeletedByLT(*i.DeletedByLT))
	}
	if i.DeletedByLTE != nil {
		predicates = append(predicates, post.DeletedByLTE(*i.DeletedByLTE))
	}
	if i.DeletedByContains != nil {
		predicates = append(predicates, post.DeletedByContains(*i.DeletedByContains))
	}
	if i.DeletedByHasPrefix != nil {
		predicates = append(predicates, post.DeletedByHasPrefix(*i.DeletedByHasPrefix))
	}
	if i.DeletedByHasSuffix != nil {
		predicates = append(predicates, post.DeletedByHasSuffix(*i.DeletedByHasSuffix))
	}
	if i.DeletedByIsNil {
		predicates = append(predicates, post.DeletedByIsNil())
	}
	if i.DeletedByNotNil {
		predicates = append(predicates, post.DeletedByNotNil())
	}
	if i.DeletedByEqualFold != nil {
		predicates = append(predicates, post.DeletedByEqualFold(*i.DeletedByEqualFold))
	}
	if i.DeletedByContainsFold != nil {
		predicates = append(predicates, post.DeletedByContainsFold(*i.DeletedByContainsFold))
	}
	if i.Pinned != nil {
		predicates = append(predicates, post.PinnedEQ(*i.Pinned))
	}
	if i.PinnedNEQ != nil {
		predicates = append(predicates, post.PinnedNEQ(*i.PinnedNEQ))
	}
	if i.Title != nil {
		predicates = append(predicates, post.TitleEQ(*i.Title))
	}
	if i.TitleNEQ != nil {
		predicates = append(predicates, post.TitleNEQ(*i.TitleNEQ))
	}
	if len(i.TitleIn) > 0 {
		predicates = append(predicates, post.TitleIn(i.TitleIn...))
	}
	if len(i.TitleNotIn) > 0 {
		predicates = append(predicates, post.TitleNotIn(i.TitleNotIn...))
	}
	if i.TitleGT != nil {
		predicates = append(predicates, post.TitleGT(*i.TitleGT))
	}
	if i.TitleGTE != nil {
		predicates = append(predicates, post.TitleGTE(*i.TitleGTE))
	}
	if i.TitleLT != nil {
		predicates = append(predicates, post.TitleLT(*i.TitleLT))
	}
	if i.TitleLTE != nil {
		predicates = append(predicates, post.TitleLTE(*i.TitleLTE))
	}
	if i.TitleContains != nil {
		predicates = append(predicates, post.TitleContains(*i.TitleContains))
	}
	if i.TitleHasPrefix != nil {
		predicates = append(predicates, post.TitleHasPrefix(*i.TitleHasPrefix))
	}
	if i.TitleHasSuffix != nil {
		predicates = append(predicates, post.TitleHasSuffix(*i.TitleHasSuffix))
	}
	if i.TitleEqualFold != nil {
		predicates = append(predicates, post.TitleEqualFold(*i.TitleEqualFold))
	}
	if i.TitleContainsFold != nil {
		predicates = append(predicates, post.TitleContainsFold(*i.TitleContainsFold))
	}
	if i.Content != nil {
		predicates = append(predicates, post.ContentEQ(*i.Content))
	}
	if i.ContentNEQ != nil {
		predicates = append(predicates, post.ContentNEQ(*i.ContentNEQ))
	}
	if len(i.ContentIn) > 0 {
		predicates = append(predicates, post.ContentIn(i.ContentIn...))
	}
	if len(i.ContentNotIn) > 0 {
		predicates = append(predicates, post.ContentNotIn(i.ContentNotIn...))
	}
	if i.ContentGT != nil {
		predicates = append(predicates, post.ContentGT(*i.ContentGT))
	}
	if i.ContentGTE != nil {
		predicates = append(predicates, post.ContentGTE(*i.ContentGTE))
	}
	if i.ContentLT != nil {
		predicates = append(predicates, post.ContentLT(*i.ContentLT))
	}
	if i.ContentLTE != nil {
		predicates = append(predicates, post.ContentLTE(*i.ContentLTE))
	}
	if i.ContentContains != nil {
		predicates = append(predicates, post.ContentContains(*i.ContentContains))
	}
	if i.ContentHasPrefix != nil {
		predicates = append(predicates, post.ContentHasPrefix(*i.ContentHasPrefix))
	}
	if i.ContentHasSuffix != nil {
		predicates = append(predicates, post.ContentHasSuffix(*i.ContentHasSuffix))
	}
	if i.ContentIsNil {
		predicates = append(predicates, post.ContentIsNil())
	}
	if i.ContentNotNil {
		predicates = append(predicates, post.ContentNotNil())
	}
	if i.ContentEqualFold != nil {
		predicates = append(predicates, post.ContentEqualFold(*i.ContentEqualFold))
	}
	if i.ContentContainsFold != nil {
		predicates = append(predicates, post.ContentContainsFold(*i.ContentContainsFold))
	}
	if i.Link != nil {
		predicates = append(predicates, post.LinkEQ(*i.Link))
	}
	if i.LinkNEQ != nil {
		predicates = append(predicates, post.LinkNEQ(*i.LinkNEQ))
	}
	if len(i.LinkIn) > 0 {
		predicates = append(predicates, post.LinkIn(i.LinkIn...))
	}
	if len(i.LinkNotIn) > 0 {
		predicates = append(predicates, post.LinkNotIn(i.LinkNotIn...))
	}
	if i.LinkGT != nil {
		predicates = append(predicates, post.LinkGT(*i.LinkGT))
	}
	if i.LinkGTE != nil {
		predicates = append(predicates, post.LinkGTE(*i.LinkGTE))
	}
	if i.LinkLT != nil {
		predicates = append(predicates, post.LinkLT(*i.LinkLT))
	}
	if i.LinkLTE != nil {
		predicates = append(predicates, post.LinkLTE(*i.LinkLTE))
	}
	if i.LinkContains != nil {
		predicates = append(predicates, post.LinkContains(*i.LinkContains))
	}
	if i.LinkHasPrefix != nil {
		predicates = append(predicates, post.LinkHasPrefix(*i.LinkHasPrefix))
	}
	if i.LinkHasSuffix != nil {
		predicates = append(predicates, post.LinkHasSuffix(*i.LinkHasSuffix))
	}
	if i.LinkEqualFold != nil {
		predicates = append(predicates, post.LinkEqualFold(*i.LinkEqualFold))
	}
	if i.LinkContainsFold != nil {
		predicates = append(predicates, post.LinkContainsFold(*i.LinkContainsFold))
	}
	if i.ModerationComment != nil {
		predicates = append(predicates, post.ModerationCommentEQ(*i.ModerationComment))
	}
	if i.ModerationCommentNEQ != nil {
		predicates = append(predicates, post.ModerationCommentNEQ(*i.ModerationCommentNEQ))
	}
	if len(i.ModerationCommentIn) > 0 {
		predicates = append(predicates, post.ModerationCommentIn(i.ModerationCommentIn...))
	}
	if len(i.ModerationCommentNotIn) > 0 {
		predicates = append(predicates, post.ModerationCommentNotIn(i.ModerationCommentNotIn...))
	}
	if i.ModerationCommentGT != nil {
		predicates = append(predicates, post.ModerationCommentGT(*i.ModerationCommentGT))
	}
	if i.ModerationCommentGTE != nil {
		predicates = append(predicates, post.ModerationCommentGTE(*i.ModerationCommentGTE))
	}
	if i.ModerationCommentLT != nil {
		predicates = append(predicates, post.ModerationCommentLT(*i.ModerationCommentLT))
	}
	if i.ModerationCommentLTE != nil {
		predicates = append(predicates, post.ModerationCommentLTE(*i.ModerationCommentLTE))
	}
	if i.ModerationCommentContains != nil {
		predicates = append(predicates, post.ModerationCommentContains(*i.ModerationCommentContains))
	}
	if i.ModerationCommentHasPrefix != nil {
		predicates = append(predicates, post.ModerationCommentHasPrefix(*i.ModerationCommentHasPrefix))
	}
	if i.ModerationCommentHasSuffix != nil {
		predicates = append(predicates, post.ModerationCommentHasSuffix(*i.ModerationCommentHasSuffix))
	}
	if i.ModerationCommentIsNil {
		predicates = append(predicates, post.ModerationCommentIsNil())
	}
	if i.ModerationCommentNotNil {
		predicates = append(predicates, post.ModerationCommentNotNil())
	}
	if i.ModerationCommentEqualFold != nil {
		predicates = append(predicates, post.ModerationCommentEqualFold(*i.ModerationCommentEqualFold))
	}
	if i.ModerationCommentContainsFold != nil {
		predicates = append(predicates, post.ModerationCommentContainsFold(*i.ModerationCommentContainsFold))
	}
	if i.IsModerated != nil {
		predicates = append(predicates, post.IsModeratedEQ(*i.IsModerated))
	}
	if i.IsModeratedNEQ != nil {
		predicates = append(predicates, post.IsModeratedNEQ(*i.IsModeratedNEQ))
	}
	if i.EntityVector != nil {
		predicates = append(predicates, post.EntityVectorEQ(*i.EntityVector))
	}
	if i.EntityVectorNEQ != nil {
		predicates = append(predicates, post.EntityVectorNEQ(*i.EntityVectorNEQ))
	}
	if len(i.EntityVectorIn) > 0 {
		predicates = append(predicates, post.EntityVectorIn(i.EntityVectorIn...))
	}
	if len(i.EntityVectorNotIn) > 0 {
		predicates = append(predicates, post.EntityVectorNotIn(i.EntityVectorNotIn...))
	}
	if i.EntityVectorGT != nil {
		predicates = append(predicates, post.EntityVectorGT(*i.EntityVectorGT))
	}
	if i.EntityVectorGTE != nil {
		predicates = append(predicates, post.EntityVectorGTE(*i.EntityVectorGTE))
	}
	if i.EntityVectorLT != nil {
		predicates = append(predicates, post.EntityVectorLT(*i.EntityVectorLT))
	}
	if i.EntityVectorLTE != nil {
		predicates = append(predicates, post.EntityVectorLTE(*i.EntityVectorLTE))
	}
	if i.EntityVectorContains != nil {
		predicates = append(predicates, post.EntityVectorContains(*i.EntityVectorContains))
	}
	if i.EntityVectorHasPrefix != nil {
		predicates = append(predicates, post.EntityVectorHasPrefix(*i.EntityVectorHasPrefix))
	}
	if i.EntityVectorHasSuffix != nil {
		predicates = append(predicates, post.EntityVectorHasSuffix(*i.EntityVectorHasSuffix))
	}
	if i.EntityVectorIsNil {
		predicates = append(predicates, post.EntityVectorIsNil())
	}
	if i.EntityVectorNotNil {
		predicates = append(predicates, post.EntityVectorNotNil())
	}
	if i.EntityVectorEqualFold != nil {
		predicates = append(predicates, post.EntityVectorEqualFold(*i.EntityVectorEqualFold))
	}
	if i.EntityVectorContainsFold != nil {
		predicates = append(predicates, post.EntityVectorContainsFold(*i.EntityVectorContainsFold))
	}

	if i.HasOwner != nil {
		p := post.HasOwner()
		if !*i.HasOwner {
			p = post.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasOwnerWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasOwnerWith))
		for _, w := range i.HasOwnerWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasOwnerWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, post.HasOwnerWith(with...))
	}
	if i.HasComments != nil {
		p := post.HasComments()
		if !*i.HasComments {
			p = post.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasCommentsWith) > 0 {
		with := make([]predicate.Comment, 0, len(i.HasCommentsWith))
		for _, w := range i.HasCommentsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasCommentsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, post.HasCommentsWith(with...))
	}
	if i.HasSavedBy != nil {
		p := post.HasSavedBy()
		if !*i.HasSavedBy {
			p = post.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasSavedByWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasSavedByWith))
		for _, w := range i.HasSavedByWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasSavedByWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, post.HasSavedByWith(with...))
	}
	if i.HasLikedBy != nil {
		p := post.HasLikedBy()
		if !*i.HasLikedBy {
			p = post.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasLikedByWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasLikedByWith))
		for _, w := range i.HasLikedByWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasLikedByWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, post.HasLikedByWith(with...))
	}
	if i.HasCategories != nil {
		p := post.HasCategories()
		if !*i.HasCategories {
			p = post.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasCategoriesWith) > 0 {
		with := make([]predicate.PostCategory, 0, len(i.HasCategoriesWith))
		for _, w := range i.HasCategoriesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasCategoriesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, post.HasCategoriesWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyPostWhereInput
	case 1:
		return predicates[0], nil
	default:
		return post.And(predicates...), nil
	}
}

// PostCategoryWhereInput represents a where input for filtering PostCategory queries.
type PostCategoryWhereInput struct {
	Predicates []predicate.PostCategory  `json:"-"`
	Not        *PostCategoryWhereInput   `json:"not,omitempty"`
	Or         []*PostCategoryWhereInput `json:"or,omitempty"`
	And        []*PostCategoryWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *uuid.UUID  `json:"id,omitempty"`
	IDNEQ   *uuid.UUID  `json:"idNEQ,omitempty"`
	IDIn    []uuid.UUID `json:"idIn,omitempty"`
	IDNotIn []uuid.UUID `json:"idNotIn,omitempty"`
	IDGT    *uuid.UUID  `json:"idGT,omitempty"`
	IDGTE   *uuid.UUID  `json:"idGTE,omitempty"`
	IDLT    *uuid.UUID  `json:"idLT,omitempty"`
	IDLTE   *uuid.UUID  `json:"idLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "category" field predicates.
	Category      *postcategory.Category  `json:"category,omitempty"`
	CategoryNEQ   *postcategory.Category  `json:"categoryNEQ,omitempty"`
	CategoryIn    []postcategory.Category `json:"categoryIn,omitempty"`
	CategoryNotIn []postcategory.Category `json:"categoryNotIn,omitempty"`

	// "post" edge predicates.
	HasPost     *bool             `json:"hasPost,omitempty"`
	HasPostWith []*PostWhereInput `json:"hasPostWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *PostCategoryWhereInput) AddPredicates(predicates ...predicate.PostCategory) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the PostCategoryWhereInput filter on the PostCategoryQuery builder.
func (i *PostCategoryWhereInput) Filter(q *PostCategoryQuery) (*PostCategoryQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyPostCategoryWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyPostCategoryWhereInput is returned in case the PostCategoryWhereInput is empty.
var ErrEmptyPostCategoryWhereInput = errors.New("generated: empty predicate PostCategoryWhereInput")

// P returns a predicate for filtering postcategories.
// An error is returned if the input is empty or invalid.
func (i *PostCategoryWhereInput) P() (predicate.PostCategory, error) {
	var predicates []predicate.PostCategory
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, postcategory.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.PostCategory, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, postcategory.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.PostCategory, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, postcategory.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, postcategory.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, postcategory.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, postcategory.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, postcategory.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, postcategory.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, postcategory.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, postcategory.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, postcategory.IDLTE(*i.IDLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, postcategory.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, postcategory.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, postcategory.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, postcategory.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, postcategory.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, postcategory.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, postcategory.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, postcategory.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, postcategory.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, postcategory.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, postcategory.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, postcategory.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, postcategory.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, postcategory.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, postcategory.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, postcategory.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.Category != nil {
		predicates = append(predicates, postcategory.CategoryEQ(*i.Category))
	}
	if i.CategoryNEQ != nil {
		predicates = append(predicates, postcategory.CategoryNEQ(*i.CategoryNEQ))
	}
	if len(i.CategoryIn) > 0 {
		predicates = append(predicates, postcategory.CategoryIn(i.CategoryIn...))
	}
	if len(i.CategoryNotIn) > 0 {
		predicates = append(predicates, postcategory.CategoryNotIn(i.CategoryNotIn...))
	}

	if i.HasPost != nil {
		p := postcategory.HasPost()
		if !*i.HasPost {
			p = postcategory.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasPostWith) > 0 {
		with := make([]predicate.Post, 0, len(i.HasPostWith))
		for _, w := range i.HasPostWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasPostWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, postcategory.HasPostWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyPostCategoryWhereInput
	case 1:
		return predicates[0], nil
	default:
		return postcategory.And(predicates...), nil
	}
}

// UserWhereInput represents a where input for filtering User queries.
type UserWhereInput struct {
	Predicates []predicate.User  `json:"-"`
	Not        *UserWhereInput   `json:"not,omitempty"`
	Or         []*UserWhereInput `json:"or,omitempty"`
	And        []*UserWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *uuid.UUID  `json:"id,omitempty"`
	IDNEQ   *uuid.UUID  `json:"idNEQ,omitempty"`
	IDIn    []uuid.UUID `json:"idIn,omitempty"`
	IDNotIn []uuid.UUID `json:"idNotIn,omitempty"`
	IDGT    *uuid.UUID  `json:"idGT,omitempty"`
	IDGTE   *uuid.UUID  `json:"idGTE,omitempty"`
	IDLT    *uuid.UUID  `json:"idLT,omitempty"`
	IDLTE   *uuid.UUID  `json:"idLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt       *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ    *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT     *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE    *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT     *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE    *time.Time  `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil bool        `json:"deletedAtNotNil,omitempty"`

	// "deleted_by" field predicates.
	DeletedBy             *string  `json:"deletedBy,omitempty"`
	DeletedByNEQ          *string  `json:"deletedByNEQ,omitempty"`
	DeletedByIn           []string `json:"deletedByIn,omitempty"`
	DeletedByNotIn        []string `json:"deletedByNotIn,omitempty"`
	DeletedByGT           *string  `json:"deletedByGT,omitempty"`
	DeletedByGTE          *string  `json:"deletedByGTE,omitempty"`
	DeletedByLT           *string  `json:"deletedByLT,omitempty"`
	DeletedByLTE          *string  `json:"deletedByLTE,omitempty"`
	DeletedByContains     *string  `json:"deletedByContains,omitempty"`
	DeletedByHasPrefix    *string  `json:"deletedByHasPrefix,omitempty"`
	DeletedByHasSuffix    *string  `json:"deletedByHasSuffix,omitempty"`
	DeletedByIsNil        bool     `json:"deletedByIsNil,omitempty"`
	DeletedByNotNil       bool     `json:"deletedByNotNil,omitempty"`
	DeletedByEqualFold    *string  `json:"deletedByEqualFold,omitempty"`
	DeletedByContainsFold *string  `json:"deletedByContainsFold,omitempty"`

	// "display_name" field predicates.
	DisplayName             *string  `json:"displayName,omitempty"`
	DisplayNameNEQ          *string  `json:"displayNameNEQ,omitempty"`
	DisplayNameIn           []string `json:"displayNameIn,omitempty"`
	DisplayNameNotIn        []string `json:"displayNameNotIn,omitempty"`
	DisplayNameGT           *string  `json:"displayNameGT,omitempty"`
	DisplayNameGTE          *string  `json:"displayNameGTE,omitempty"`
	DisplayNameLT           *string  `json:"displayNameLT,omitempty"`
	DisplayNameLTE          *string  `json:"displayNameLTE,omitempty"`
	DisplayNameContains     *string  `json:"displayNameContains,omitempty"`
	DisplayNameHasPrefix    *string  `json:"displayNameHasPrefix,omitempty"`
	DisplayNameHasSuffix    *string  `json:"displayNameHasSuffix,omitempty"`
	DisplayNameEqualFold    *string  `json:"displayNameEqualFold,omitempty"`
	DisplayNameContainsFold *string  `json:"displayNameContainsFold,omitempty"`

	// "alias" field predicates.
	Alias             *string  `json:"alias,omitempty"`
	AliasNEQ          *string  `json:"aliasNEQ,omitempty"`
	AliasIn           []string `json:"aliasIn,omitempty"`
	AliasNotIn        []string `json:"aliasNotIn,omitempty"`
	AliasGT           *string  `json:"aliasGT,omitempty"`
	AliasGTE          *string  `json:"aliasGTE,omitempty"`
	AliasLT           *string  `json:"aliasLT,omitempty"`
	AliasLTE          *string  `json:"aliasLTE,omitempty"`
	AliasContains     *string  `json:"aliasContains,omitempty"`
	AliasHasPrefix    *string  `json:"aliasHasPrefix,omitempty"`
	AliasHasSuffix    *string  `json:"aliasHasSuffix,omitempty"`
	AliasIsNil        bool     `json:"aliasIsNil,omitempty"`
	AliasNotNil       bool     `json:"aliasNotNil,omitempty"`
	AliasEqualFold    *string  `json:"aliasEqualFold,omitempty"`
	AliasContainsFold *string  `json:"aliasContainsFold,omitempty"`

	// "profile_image" field predicates.
	ProfileImage             *string  `json:"profileImage,omitempty"`
	ProfileImageNEQ          *string  `json:"profileImageNEQ,omitempty"`
	ProfileImageIn           []string `json:"profileImageIn,omitempty"`
	ProfileImageNotIn        []string `json:"profileImageNotIn,omitempty"`
	ProfileImageGT           *string  `json:"profileImageGT,omitempty"`
	ProfileImageGTE          *string  `json:"profileImageGTE,omitempty"`
	ProfileImageLT           *string  `json:"profileImageLT,omitempty"`
	ProfileImageLTE          *string  `json:"profileImageLTE,omitempty"`
	ProfileImageContains     *string  `json:"profileImageContains,omitempty"`
	ProfileImageHasPrefix    *string  `json:"profileImageHasPrefix,omitempty"`
	ProfileImageHasSuffix    *string  `json:"profileImageHasSuffix,omitempty"`
	ProfileImageIsNil        bool     `json:"profileImageIsNil,omitempty"`
	ProfileImageNotNil       bool     `json:"profileImageNotNil,omitempty"`
	ProfileImageEqualFold    *string  `json:"profileImageEqualFold,omitempty"`
	ProfileImageContainsFold *string  `json:"profileImageContainsFold,omitempty"`

	// "auth_provider" field predicates.
	AuthProvider      *user.AuthProvider  `json:"authProvider,omitempty"`
	AuthProviderNEQ   *user.AuthProvider  `json:"authProviderNEQ,omitempty"`
	AuthProviderIn    []user.AuthProvider `json:"authProviderIn,omitempty"`
	AuthProviderNotIn []user.AuthProvider `json:"authProviderNotIn,omitempty"`

	// "role" field predicates.
	Role      *user.Role  `json:"role,omitempty"`
	RoleNEQ   *user.Role  `json:"roleNEQ,omitempty"`
	RoleIn    []user.Role `json:"roleIn,omitempty"`
	RoleNotIn []user.Role `json:"roleNotIn,omitempty"`

	// "last_seen_at" field predicates.
	LastSeenAt       *time.Time  `json:"lastSeenAt,omitempty"`
	LastSeenAtNEQ    *time.Time  `json:"lastSeenAtNEQ,omitempty"`
	LastSeenAtIn     []time.Time `json:"lastSeenAtIn,omitempty"`
	LastSeenAtNotIn  []time.Time `json:"lastSeenAtNotIn,omitempty"`
	LastSeenAtGT     *time.Time  `json:"lastSeenAtGT,omitempty"`
	LastSeenAtGTE    *time.Time  `json:"lastSeenAtGTE,omitempty"`
	LastSeenAtLT     *time.Time  `json:"lastSeenAtLT,omitempty"`
	LastSeenAtLTE    *time.Time  `json:"lastSeenAtLTE,omitempty"`
	LastSeenAtIsNil  bool        `json:"lastSeenAtIsNil,omitempty"`
	LastSeenAtNotNil bool        `json:"lastSeenAtNotNil,omitempty"`

	// "last_post_seen_cursor" field predicates.
	LastPostSeenCursor             *string  `json:"lastPostSeenCursor,omitempty"`
	LastPostSeenCursorNEQ          *string  `json:"lastPostSeenCursorNEQ,omitempty"`
	LastPostSeenCursorIn           []string `json:"lastPostSeenCursorIn,omitempty"`
	LastPostSeenCursorNotIn        []string `json:"lastPostSeenCursorNotIn,omitempty"`
	LastPostSeenCursorGT           *string  `json:"lastPostSeenCursorGT,omitempty"`
	LastPostSeenCursorGTE          *string  `json:"lastPostSeenCursorGTE,omitempty"`
	LastPostSeenCursorLT           *string  `json:"lastPostSeenCursorLT,omitempty"`
	LastPostSeenCursorLTE          *string  `json:"lastPostSeenCursorLTE,omitempty"`
	LastPostSeenCursorContains     *string  `json:"lastPostSeenCursorContains,omitempty"`
	LastPostSeenCursorHasPrefix    *string  `json:"lastPostSeenCursorHasPrefix,omitempty"`
	LastPostSeenCursorHasSuffix    *string  `json:"lastPostSeenCursorHasSuffix,omitempty"`
	LastPostSeenCursorIsNil        bool     `json:"lastPostSeenCursorIsNil,omitempty"`
	LastPostSeenCursorNotNil       bool     `json:"lastPostSeenCursorNotNil,omitempty"`
	LastPostSeenCursorEqualFold    *string  `json:"lastPostSeenCursorEqualFold,omitempty"`
	LastPostSeenCursorContainsFold *string  `json:"lastPostSeenCursorContainsFold,omitempty"`

	// "saved_posts" edge predicates.
	HasSavedPosts     *bool             `json:"hasSavedPosts,omitempty"`
	HasSavedPostsWith []*PostWhereInput `json:"hasSavedPostsWith,omitempty"`

	// "liked_posts" edge predicates.
	HasLikedPosts     *bool             `json:"hasLikedPosts,omitempty"`
	HasLikedPostsWith []*PostWhereInput `json:"hasLikedPostsWith,omitempty"`

	// "published_posts" edge predicates.
	HasPublishedPosts     *bool             `json:"hasPublishedPosts,omitempty"`
	HasPublishedPostsWith []*PostWhereInput `json:"hasPublishedPostsWith,omitempty"`

	// "comments" edge predicates.
	HasComments     *bool                `json:"hasComments,omitempty"`
	HasCommentsWith []*CommentWhereInput `json:"hasCommentsWith,omitempty"`

	// "api_keys" edge predicates.
	HasAPIKeys     *bool               `json:"hasAPIKeys,omitempty"`
	HasAPIKeysWith []*ApiKeyWhereInput `json:"hasAPIKeysWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *UserWhereInput) AddPredicates(predicates ...predicate.User) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the UserWhereInput filter on the UserQuery builder.
func (i *UserWhereInput) Filter(q *UserQuery) (*UserQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyUserWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyUserWhereInput is returned in case the UserWhereInput is empty.
var ErrEmptyUserWhereInput = errors.New("generated: empty predicate UserWhereInput")

// P returns a predicate for filtering users.
// An error is returned if the input is empty or invalid.
func (i *UserWhereInput) P() (predicate.User, error) {
	var predicates []predicate.User
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, user.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.User, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, user.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.User, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, user.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, user.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, user.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, user.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, user.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, user.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, user.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, user.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, user.IDLTE(*i.IDLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, user.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, user.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, user.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, user.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, user.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, user.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, user.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, user.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, user.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, user.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, user.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, user.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, user.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, user.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, user.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, user.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, user.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, user.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, user.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, user.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, user.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, user.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, user.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, user.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.DeletedAtIsNil {
		predicates = append(predicates, user.DeletedAtIsNil())
	}
	if i.DeletedAtNotNil {
		predicates = append(predicates, user.DeletedAtNotNil())
	}
	if i.DeletedBy != nil {
		predicates = append(predicates, user.DeletedByEQ(*i.DeletedBy))
	}
	if i.DeletedByNEQ != nil {
		predicates = append(predicates, user.DeletedByNEQ(*i.DeletedByNEQ))
	}
	if len(i.DeletedByIn) > 0 {
		predicates = append(predicates, user.DeletedByIn(i.DeletedByIn...))
	}
	if len(i.DeletedByNotIn) > 0 {
		predicates = append(predicates, user.DeletedByNotIn(i.DeletedByNotIn...))
	}
	if i.DeletedByGT != nil {
		predicates = append(predicates, user.DeletedByGT(*i.DeletedByGT))
	}
	if i.DeletedByGTE != nil {
		predicates = append(predicates, user.DeletedByGTE(*i.DeletedByGTE))
	}
	if i.DeletedByLT != nil {
		predicates = append(predicates, user.DeletedByLT(*i.DeletedByLT))
	}
	if i.DeletedByLTE != nil {
		predicates = append(predicates, user.DeletedByLTE(*i.DeletedByLTE))
	}
	if i.DeletedByContains != nil {
		predicates = append(predicates, user.DeletedByContains(*i.DeletedByContains))
	}
	if i.DeletedByHasPrefix != nil {
		predicates = append(predicates, user.DeletedByHasPrefix(*i.DeletedByHasPrefix))
	}
	if i.DeletedByHasSuffix != nil {
		predicates = append(predicates, user.DeletedByHasSuffix(*i.DeletedByHasSuffix))
	}
	if i.DeletedByIsNil {
		predicates = append(predicates, user.DeletedByIsNil())
	}
	if i.DeletedByNotNil {
		predicates = append(predicates, user.DeletedByNotNil())
	}
	if i.DeletedByEqualFold != nil {
		predicates = append(predicates, user.DeletedByEqualFold(*i.DeletedByEqualFold))
	}
	if i.DeletedByContainsFold != nil {
		predicates = append(predicates, user.DeletedByContainsFold(*i.DeletedByContainsFold))
	}
	if i.DisplayName != nil {
		predicates = append(predicates, user.DisplayNameEQ(*i.DisplayName))
	}
	if i.DisplayNameNEQ != nil {
		predicates = append(predicates, user.DisplayNameNEQ(*i.DisplayNameNEQ))
	}
	if len(i.DisplayNameIn) > 0 {
		predicates = append(predicates, user.DisplayNameIn(i.DisplayNameIn...))
	}
	if len(i.DisplayNameNotIn) > 0 {
		predicates = append(predicates, user.DisplayNameNotIn(i.DisplayNameNotIn...))
	}
	if i.DisplayNameGT != nil {
		predicates = append(predicates, user.DisplayNameGT(*i.DisplayNameGT))
	}
	if i.DisplayNameGTE != nil {
		predicates = append(predicates, user.DisplayNameGTE(*i.DisplayNameGTE))
	}
	if i.DisplayNameLT != nil {
		predicates = append(predicates, user.DisplayNameLT(*i.DisplayNameLT))
	}
	if i.DisplayNameLTE != nil {
		predicates = append(predicates, user.DisplayNameLTE(*i.DisplayNameLTE))
	}
	if i.DisplayNameContains != nil {
		predicates = append(predicates, user.DisplayNameContains(*i.DisplayNameContains))
	}
	if i.DisplayNameHasPrefix != nil {
		predicates = append(predicates, user.DisplayNameHasPrefix(*i.DisplayNameHasPrefix))
	}
	if i.DisplayNameHasSuffix != nil {
		predicates = append(predicates, user.DisplayNameHasSuffix(*i.DisplayNameHasSuffix))
	}
	if i.DisplayNameEqualFold != nil {
		predicates = append(predicates, user.DisplayNameEqualFold(*i.DisplayNameEqualFold))
	}
	if i.DisplayNameContainsFold != nil {
		predicates = append(predicates, user.DisplayNameContainsFold(*i.DisplayNameContainsFold))
	}
	if i.Alias != nil {
		predicates = append(predicates, user.AliasEQ(*i.Alias))
	}
	if i.AliasNEQ != nil {
		predicates = append(predicates, user.AliasNEQ(*i.AliasNEQ))
	}
	if len(i.AliasIn) > 0 {
		predicates = append(predicates, user.AliasIn(i.AliasIn...))
	}
	if len(i.AliasNotIn) > 0 {
		predicates = append(predicates, user.AliasNotIn(i.AliasNotIn...))
	}
	if i.AliasGT != nil {
		predicates = append(predicates, user.AliasGT(*i.AliasGT))
	}
	if i.AliasGTE != nil {
		predicates = append(predicates, user.AliasGTE(*i.AliasGTE))
	}
	if i.AliasLT != nil {
		predicates = append(predicates, user.AliasLT(*i.AliasLT))
	}
	if i.AliasLTE != nil {
		predicates = append(predicates, user.AliasLTE(*i.AliasLTE))
	}
	if i.AliasContains != nil {
		predicates = append(predicates, user.AliasContains(*i.AliasContains))
	}
	if i.AliasHasPrefix != nil {
		predicates = append(predicates, user.AliasHasPrefix(*i.AliasHasPrefix))
	}
	if i.AliasHasSuffix != nil {
		predicates = append(predicates, user.AliasHasSuffix(*i.AliasHasSuffix))
	}
	if i.AliasIsNil {
		predicates = append(predicates, user.AliasIsNil())
	}
	if i.AliasNotNil {
		predicates = append(predicates, user.AliasNotNil())
	}
	if i.AliasEqualFold != nil {
		predicates = append(predicates, user.AliasEqualFold(*i.AliasEqualFold))
	}
	if i.AliasContainsFold != nil {
		predicates = append(predicates, user.AliasContainsFold(*i.AliasContainsFold))
	}
	if i.ProfileImage != nil {
		predicates = append(predicates, user.ProfileImageEQ(*i.ProfileImage))
	}
	if i.ProfileImageNEQ != nil {
		predicates = append(predicates, user.ProfileImageNEQ(*i.ProfileImageNEQ))
	}
	if len(i.ProfileImageIn) > 0 {
		predicates = append(predicates, user.ProfileImageIn(i.ProfileImageIn...))
	}
	if len(i.ProfileImageNotIn) > 0 {
		predicates = append(predicates, user.ProfileImageNotIn(i.ProfileImageNotIn...))
	}
	if i.ProfileImageGT != nil {
		predicates = append(predicates, user.ProfileImageGT(*i.ProfileImageGT))
	}
	if i.ProfileImageGTE != nil {
		predicates = append(predicates, user.ProfileImageGTE(*i.ProfileImageGTE))
	}
	if i.ProfileImageLT != nil {
		predicates = append(predicates, user.ProfileImageLT(*i.ProfileImageLT))
	}
	if i.ProfileImageLTE != nil {
		predicates = append(predicates, user.ProfileImageLTE(*i.ProfileImageLTE))
	}
	if i.ProfileImageContains != nil {
		predicates = append(predicates, user.ProfileImageContains(*i.ProfileImageContains))
	}
	if i.ProfileImageHasPrefix != nil {
		predicates = append(predicates, user.ProfileImageHasPrefix(*i.ProfileImageHasPrefix))
	}
	if i.ProfileImageHasSuffix != nil {
		predicates = append(predicates, user.ProfileImageHasSuffix(*i.ProfileImageHasSuffix))
	}
	if i.ProfileImageIsNil {
		predicates = append(predicates, user.ProfileImageIsNil())
	}
	if i.ProfileImageNotNil {
		predicates = append(predicates, user.ProfileImageNotNil())
	}
	if i.ProfileImageEqualFold != nil {
		predicates = append(predicates, user.ProfileImageEqualFold(*i.ProfileImageEqualFold))
	}
	if i.ProfileImageContainsFold != nil {
		predicates = append(predicates, user.ProfileImageContainsFold(*i.ProfileImageContainsFold))
	}
	if i.AuthProvider != nil {
		predicates = append(predicates, user.AuthProviderEQ(*i.AuthProvider))
	}
	if i.AuthProviderNEQ != nil {
		predicates = append(predicates, user.AuthProviderNEQ(*i.AuthProviderNEQ))
	}
	if len(i.AuthProviderIn) > 0 {
		predicates = append(predicates, user.AuthProviderIn(i.AuthProviderIn...))
	}
	if len(i.AuthProviderNotIn) > 0 {
		predicates = append(predicates, user.AuthProviderNotIn(i.AuthProviderNotIn...))
	}
	if i.Role != nil {
		predicates = append(predicates, user.RoleEQ(*i.Role))
	}
	if i.RoleNEQ != nil {
		predicates = append(predicates, user.RoleNEQ(*i.RoleNEQ))
	}
	if len(i.RoleIn) > 0 {
		predicates = append(predicates, user.RoleIn(i.RoleIn...))
	}
	if len(i.RoleNotIn) > 0 {
		predicates = append(predicates, user.RoleNotIn(i.RoleNotIn...))
	}
	if i.LastSeenAt != nil {
		predicates = append(predicates, user.LastSeenAtEQ(*i.LastSeenAt))
	}
	if i.LastSeenAtNEQ != nil {
		predicates = append(predicates, user.LastSeenAtNEQ(*i.LastSeenAtNEQ))
	}
	if len(i.LastSeenAtIn) > 0 {
		predicates = append(predicates, user.LastSeenAtIn(i.LastSeenAtIn...))
	}
	if len(i.LastSeenAtNotIn) > 0 {
		predicates = append(predicates, user.LastSeenAtNotIn(i.LastSeenAtNotIn...))
	}
	if i.LastSeenAtGT != nil {
		predicates = append(predicates, user.LastSeenAtGT(*i.LastSeenAtGT))
	}
	if i.LastSeenAtGTE != nil {
		predicates = append(predicates, user.LastSeenAtGTE(*i.LastSeenAtGTE))
	}
	if i.LastSeenAtLT != nil {
		predicates = append(predicates, user.LastSeenAtLT(*i.LastSeenAtLT))
	}
	if i.LastSeenAtLTE != nil {
		predicates = append(predicates, user.LastSeenAtLTE(*i.LastSeenAtLTE))
	}
	if i.LastSeenAtIsNil {
		predicates = append(predicates, user.LastSeenAtIsNil())
	}
	if i.LastSeenAtNotNil {
		predicates = append(predicates, user.LastSeenAtNotNil())
	}
	if i.LastPostSeenCursor != nil {
		predicates = append(predicates, user.LastPostSeenCursorEQ(*i.LastPostSeenCursor))
	}
	if i.LastPostSeenCursorNEQ != nil {
		predicates = append(predicates, user.LastPostSeenCursorNEQ(*i.LastPostSeenCursorNEQ))
	}
	if len(i.LastPostSeenCursorIn) > 0 {
		predicates = append(predicates, user.LastPostSeenCursorIn(i.LastPostSeenCursorIn...))
	}
	if len(i.LastPostSeenCursorNotIn) > 0 {
		predicates = append(predicates, user.LastPostSeenCursorNotIn(i.LastPostSeenCursorNotIn...))
	}
	if i.LastPostSeenCursorGT != nil {
		predicates = append(predicates, user.LastPostSeenCursorGT(*i.LastPostSeenCursorGT))
	}
	if i.LastPostSeenCursorGTE != nil {
		predicates = append(predicates, user.LastPostSeenCursorGTE(*i.LastPostSeenCursorGTE))
	}
	if i.LastPostSeenCursorLT != nil {
		predicates = append(predicates, user.LastPostSeenCursorLT(*i.LastPostSeenCursorLT))
	}
	if i.LastPostSeenCursorLTE != nil {
		predicates = append(predicates, user.LastPostSeenCursorLTE(*i.LastPostSeenCursorLTE))
	}
	if i.LastPostSeenCursorContains != nil {
		predicates = append(predicates, user.LastPostSeenCursorContains(*i.LastPostSeenCursorContains))
	}
	if i.LastPostSeenCursorHasPrefix != nil {
		predicates = append(predicates, user.LastPostSeenCursorHasPrefix(*i.LastPostSeenCursorHasPrefix))
	}
	if i.LastPostSeenCursorHasSuffix != nil {
		predicates = append(predicates, user.LastPostSeenCursorHasSuffix(*i.LastPostSeenCursorHasSuffix))
	}
	if i.LastPostSeenCursorIsNil {
		predicates = append(predicates, user.LastPostSeenCursorIsNil())
	}
	if i.LastPostSeenCursorNotNil {
		predicates = append(predicates, user.LastPostSeenCursorNotNil())
	}
	if i.LastPostSeenCursorEqualFold != nil {
		predicates = append(predicates, user.LastPostSeenCursorEqualFold(*i.LastPostSeenCursorEqualFold))
	}
	if i.LastPostSeenCursorContainsFold != nil {
		predicates = append(predicates, user.LastPostSeenCursorContainsFold(*i.LastPostSeenCursorContainsFold))
	}

	if i.HasSavedPosts != nil {
		p := user.HasSavedPosts()
		if !*i.HasSavedPosts {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasSavedPostsWith) > 0 {
		with := make([]predicate.Post, 0, len(i.HasSavedPostsWith))
		for _, w := range i.HasSavedPostsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasSavedPostsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasSavedPostsWith(with...))
	}
	if i.HasLikedPosts != nil {
		p := user.HasLikedPosts()
		if !*i.HasLikedPosts {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasLikedPostsWith) > 0 {
		with := make([]predicate.Post, 0, len(i.HasLikedPostsWith))
		for _, w := range i.HasLikedPostsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasLikedPostsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasLikedPostsWith(with...))
	}
	if i.HasPublishedPosts != nil {
		p := user.HasPublishedPosts()
		if !*i.HasPublishedPosts {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasPublishedPostsWith) > 0 {
		with := make([]predicate.Post, 0, len(i.HasPublishedPostsWith))
		for _, w := range i.HasPublishedPostsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasPublishedPostsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasPublishedPostsWith(with...))
	}
	if i.HasComments != nil {
		p := user.HasComments()
		if !*i.HasComments {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasCommentsWith) > 0 {
		with := make([]predicate.Comment, 0, len(i.HasCommentsWith))
		for _, w := range i.HasCommentsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasCommentsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasCommentsWith(with...))
	}
	if i.HasAPIKeys != nil {
		p := user.HasAPIKeys()
		if !*i.HasAPIKeys {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasAPIKeysWith) > 0 {
		with := make([]predicate.ApiKey, 0, len(i.HasAPIKeysWith))
		for _, w := range i.HasAPIKeysWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasAPIKeysWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasAPIKeysWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyUserWhereInput
	case 1:
		return predicates[0], nil
	default:
		return user.And(predicates...), nil
	}
}
