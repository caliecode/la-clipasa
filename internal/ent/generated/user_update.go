// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/laclipasa/la-clipasa/internal/ent/generated/apikey"
	"github.com/laclipasa/la-clipasa/internal/ent/generated/comment"
	"github.com/laclipasa/la-clipasa/internal/ent/generated/post"
	"github.com/laclipasa/la-clipasa/internal/ent/generated/predicate"
	"github.com/laclipasa/la-clipasa/internal/ent/generated/user"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks     []Hook
	mutation  *UserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetUpdatedAt sets the "updated_at" field.
func (uu *UserUpdate) SetUpdatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetUpdatedAt(t)
	return uu
}

// SetDeletedAt sets the "deleted_at" field.
func (uu *UserUpdate) SetDeletedAt(t time.Time) *UserUpdate {
	uu.mutation.SetDeletedAt(t)
	return uu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDeletedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetDeletedAt(*t)
	}
	return uu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (uu *UserUpdate) ClearDeletedAt() *UserUpdate {
	uu.mutation.ClearDeletedAt()
	return uu
}

// SetDeletedBy sets the "deleted_by" field.
func (uu *UserUpdate) SetDeletedBy(s string) *UserUpdate {
	uu.mutation.SetDeletedBy(s)
	return uu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDeletedBy(s *string) *UserUpdate {
	if s != nil {
		uu.SetDeletedBy(*s)
	}
	return uu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (uu *UserUpdate) ClearDeletedBy() *UserUpdate {
	uu.mutation.ClearDeletedBy()
	return uu
}

// SetDisplayName sets the "display_name" field.
func (uu *UserUpdate) SetDisplayName(s string) *UserUpdate {
	uu.mutation.SetDisplayName(s)
	return uu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDisplayName(s *string) *UserUpdate {
	if s != nil {
		uu.SetDisplayName(*s)
	}
	return uu
}

// SetAlias sets the "alias" field.
func (uu *UserUpdate) SetAlias(s string) *UserUpdate {
	uu.mutation.SetAlias(s)
	return uu
}

// SetNillableAlias sets the "alias" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAlias(s *string) *UserUpdate {
	if s != nil {
		uu.SetAlias(*s)
	}
	return uu
}

// ClearAlias clears the value of the "alias" field.
func (uu *UserUpdate) ClearAlias() *UserUpdate {
	uu.mutation.ClearAlias()
	return uu
}

// SetProfileImage sets the "profile_image" field.
func (uu *UserUpdate) SetProfileImage(s string) *UserUpdate {
	uu.mutation.SetProfileImage(s)
	return uu
}

// SetNillableProfileImage sets the "profile_image" field if the given value is not nil.
func (uu *UserUpdate) SetNillableProfileImage(s *string) *UserUpdate {
	if s != nil {
		uu.SetProfileImage(*s)
	}
	return uu
}

// ClearProfileImage clears the value of the "profile_image" field.
func (uu *UserUpdate) ClearProfileImage() *UserUpdate {
	uu.mutation.ClearProfileImage()
	return uu
}

// SetExternalID sets the "external_id" field.
func (uu *UserUpdate) SetExternalID(s string) *UserUpdate {
	uu.mutation.SetExternalID(s)
	return uu
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableExternalID(s *string) *UserUpdate {
	if s != nil {
		uu.SetExternalID(*s)
	}
	return uu
}

// SetAuthProvider sets the "auth_provider" field.
func (uu *UserUpdate) SetAuthProvider(up user.AuthProvider) *UserUpdate {
	uu.mutation.SetAuthProvider(up)
	return uu
}

// SetNillableAuthProvider sets the "auth_provider" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAuthProvider(up *user.AuthProvider) *UserUpdate {
	if up != nil {
		uu.SetAuthProvider(*up)
	}
	return uu
}

// SetRole sets the "role" field.
func (uu *UserUpdate) SetRole(u user.Role) *UserUpdate {
	uu.mutation.SetRole(u)
	return uu
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (uu *UserUpdate) SetNillableRole(u *user.Role) *UserUpdate {
	if u != nil {
		uu.SetRole(*u)
	}
	return uu
}

// SetLastSeenAt sets the "last_seen_at" field.
func (uu *UserUpdate) SetLastSeenAt(t time.Time) *UserUpdate {
	uu.mutation.SetLastSeenAt(t)
	return uu
}

// ClearLastSeenAt clears the value of the "last_seen_at" field.
func (uu *UserUpdate) ClearLastSeenAt() *UserUpdate {
	uu.mutation.ClearLastSeenAt()
	return uu
}

// SetLastPostSeenCursor sets the "last_post_seen_cursor" field.
func (uu *UserUpdate) SetLastPostSeenCursor(s string) *UserUpdate {
	uu.mutation.SetLastPostSeenCursor(s)
	return uu
}

// SetNillableLastPostSeenCursor sets the "last_post_seen_cursor" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLastPostSeenCursor(s *string) *UserUpdate {
	if s != nil {
		uu.SetLastPostSeenCursor(*s)
	}
	return uu
}

// ClearLastPostSeenCursor clears the value of the "last_post_seen_cursor" field.
func (uu *UserUpdate) ClearLastPostSeenCursor() *UserUpdate {
	uu.mutation.ClearLastPostSeenCursor()
	return uu
}

// SetAwards sets the "awards" field.
func (uu *UserUpdate) SetAwards(s []string) *UserUpdate {
	uu.mutation.SetAwards(s)
	return uu
}

// AppendAwards appends s to the "awards" field.
func (uu *UserUpdate) AppendAwards(s []string) *UserUpdate {
	uu.mutation.AppendAwards(s)
	return uu
}

// ClearAwards clears the value of the "awards" field.
func (uu *UserUpdate) ClearAwards() *UserUpdate {
	uu.mutation.ClearAwards()
	return uu
}

// AddSavedPostIDs adds the "saved_posts" edge to the Post entity by IDs.
func (uu *UserUpdate) AddSavedPostIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddSavedPostIDs(ids...)
	return uu
}

// AddSavedPosts adds the "saved_posts" edges to the Post entity.
func (uu *UserUpdate) AddSavedPosts(p ...*Post) *UserUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.AddSavedPostIDs(ids...)
}

// AddLikedPostIDs adds the "liked_posts" edge to the Post entity by IDs.
func (uu *UserUpdate) AddLikedPostIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddLikedPostIDs(ids...)
	return uu
}

// AddLikedPosts adds the "liked_posts" edges to the Post entity.
func (uu *UserUpdate) AddLikedPosts(p ...*Post) *UserUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.AddLikedPostIDs(ids...)
}

// AddPublishedPostIDs adds the "published_posts" edge to the Post entity by IDs.
func (uu *UserUpdate) AddPublishedPostIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddPublishedPostIDs(ids...)
	return uu
}

// AddPublishedPosts adds the "published_posts" edges to the Post entity.
func (uu *UserUpdate) AddPublishedPosts(p ...*Post) *UserUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.AddPublishedPostIDs(ids...)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (uu *UserUpdate) AddCommentIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddCommentIDs(ids...)
	return uu
}

// AddComments adds the "comments" edges to the Comment entity.
func (uu *UserUpdate) AddComments(c ...*Comment) *UserUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.AddCommentIDs(ids...)
}

// SetAPIKeyID sets the "api_key" edge to the ApiKey entity by ID.
func (uu *UserUpdate) SetAPIKeyID(id uuid.UUID) *UserUpdate {
	uu.mutation.SetAPIKeyID(id)
	return uu
}

// SetNillableAPIKeyID sets the "api_key" edge to the ApiKey entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableAPIKeyID(id *uuid.UUID) *UserUpdate {
	if id != nil {
		uu = uu.SetAPIKeyID(*id)
	}
	return uu
}

// SetAPIKey sets the "api_key" edge to the ApiKey entity.
func (uu *UserUpdate) SetAPIKey(a *ApiKey) *UserUpdate {
	return uu.SetAPIKeyID(a.ID)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearSavedPosts clears all "saved_posts" edges to the Post entity.
func (uu *UserUpdate) ClearSavedPosts() *UserUpdate {
	uu.mutation.ClearSavedPosts()
	return uu
}

// RemoveSavedPostIDs removes the "saved_posts" edge to Post entities by IDs.
func (uu *UserUpdate) RemoveSavedPostIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveSavedPostIDs(ids...)
	return uu
}

// RemoveSavedPosts removes "saved_posts" edges to Post entities.
func (uu *UserUpdate) RemoveSavedPosts(p ...*Post) *UserUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.RemoveSavedPostIDs(ids...)
}

// ClearLikedPosts clears all "liked_posts" edges to the Post entity.
func (uu *UserUpdate) ClearLikedPosts() *UserUpdate {
	uu.mutation.ClearLikedPosts()
	return uu
}

// RemoveLikedPostIDs removes the "liked_posts" edge to Post entities by IDs.
func (uu *UserUpdate) RemoveLikedPostIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveLikedPostIDs(ids...)
	return uu
}

// RemoveLikedPosts removes "liked_posts" edges to Post entities.
func (uu *UserUpdate) RemoveLikedPosts(p ...*Post) *UserUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.RemoveLikedPostIDs(ids...)
}

// ClearPublishedPosts clears all "published_posts" edges to the Post entity.
func (uu *UserUpdate) ClearPublishedPosts() *UserUpdate {
	uu.mutation.ClearPublishedPosts()
	return uu
}

// RemovePublishedPostIDs removes the "published_posts" edge to Post entities by IDs.
func (uu *UserUpdate) RemovePublishedPostIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemovePublishedPostIDs(ids...)
	return uu
}

// RemovePublishedPosts removes "published_posts" edges to Post entities.
func (uu *UserUpdate) RemovePublishedPosts(p ...*Post) *UserUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.RemovePublishedPostIDs(ids...)
}

// ClearComments clears all "comments" edges to the Comment entity.
func (uu *UserUpdate) ClearComments() *UserUpdate {
	uu.mutation.ClearComments()
	return uu
}

// RemoveCommentIDs removes the "comments" edge to Comment entities by IDs.
func (uu *UserUpdate) RemoveCommentIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveCommentIDs(ids...)
	return uu
}

// RemoveComments removes "comments" edges to Comment entities.
func (uu *UserUpdate) RemoveComments(c ...*Comment) *UserUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.RemoveCommentIDs(ids...)
}

// ClearAPIKey clears the "api_key" edge to the ApiKey entity.
func (uu *UserUpdate) ClearAPIKey() *UserUpdate {
	uu.mutation.ClearAPIKey()
	return uu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	if err := uu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uu *UserUpdate) defaults() error {
	if _, ok := uu.mutation.UpdatedAt(); !ok {
		if user.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized user.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := user.UpdateDefaultUpdatedAt()
		uu.mutation.SetUpdatedAt(v)
	}
	if _, ok := uu.mutation.LastSeenAt(); !ok && !uu.mutation.LastSeenAtCleared() {
		if user.UpdateDefaultLastSeenAt == nil {
			return fmt.Errorf("generated: uninitialized user.UpdateDefaultLastSeenAt (forgotten import generated/runtime?)")
		}
		v := user.UpdateDefaultLastSeenAt()
		uu.mutation.SetLastSeenAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.AuthProvider(); ok {
		if err := user.AuthProviderValidator(v); err != nil {
			return &ValidationError{Name: "auth_provider", err: fmt.Errorf(`generated: validator failed for field "User.auth_provider": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Role(); ok {
		if err := user.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`generated: validator failed for field "User.role": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uu *UserUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserUpdate {
	uu.modifiers = append(uu.modifiers, modifiers...)
	return uu
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uu.mutation.DeletedAt(); ok {
		_spec.SetField(user.FieldDeletedAt, field.TypeTime, value)
	}
	if uu.mutation.DeletedAtCleared() {
		_spec.ClearField(user.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := uu.mutation.DeletedBy(); ok {
		_spec.SetField(user.FieldDeletedBy, field.TypeString, value)
	}
	if uu.mutation.DeletedByCleared() {
		_spec.ClearField(user.FieldDeletedBy, field.TypeString)
	}
	if value, ok := uu.mutation.DisplayName(); ok {
		_spec.SetField(user.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := uu.mutation.Alias(); ok {
		_spec.SetField(user.FieldAlias, field.TypeString, value)
	}
	if uu.mutation.AliasCleared() {
		_spec.ClearField(user.FieldAlias, field.TypeString)
	}
	if value, ok := uu.mutation.ProfileImage(); ok {
		_spec.SetField(user.FieldProfileImage, field.TypeString, value)
	}
	if uu.mutation.ProfileImageCleared() {
		_spec.ClearField(user.FieldProfileImage, field.TypeString)
	}
	if value, ok := uu.mutation.ExternalID(); ok {
		_spec.SetField(user.FieldExternalID, field.TypeString, value)
	}
	if value, ok := uu.mutation.AuthProvider(); ok {
		_spec.SetField(user.FieldAuthProvider, field.TypeEnum, value)
	}
	if value, ok := uu.mutation.Role(); ok {
		_spec.SetField(user.FieldRole, field.TypeEnum, value)
	}
	if value, ok := uu.mutation.LastSeenAt(); ok {
		_spec.SetField(user.FieldLastSeenAt, field.TypeTime, value)
	}
	if uu.mutation.LastSeenAtCleared() {
		_spec.ClearField(user.FieldLastSeenAt, field.TypeTime)
	}
	if value, ok := uu.mutation.LastPostSeenCursor(); ok {
		_spec.SetField(user.FieldLastPostSeenCursor, field.TypeString, value)
	}
	if uu.mutation.LastPostSeenCursorCleared() {
		_spec.ClearField(user.FieldLastPostSeenCursor, field.TypeString)
	}
	if value, ok := uu.mutation.Awards(); ok {
		_spec.SetField(user.FieldAwards, field.TypeJSON, value)
	}
	if value, ok := uu.mutation.AppendedAwards(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, user.FieldAwards, value)
		})
	}
	if uu.mutation.AwardsCleared() {
		_spec.ClearField(user.FieldAwards, field.TypeJSON)
	}
	if uu.mutation.SavedPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.SavedPostsTable,
			Columns: user.SavedPostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedSavedPostsIDs(); len(nodes) > 0 && !uu.mutation.SavedPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.SavedPostsTable,
			Columns: user.SavedPostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.SavedPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.SavedPostsTable,
			Columns: user.SavedPostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.LikedPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.LikedPostsTable,
			Columns: user.LikedPostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedLikedPostsIDs(); len(nodes) > 0 && !uu.mutation.LikedPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.LikedPostsTable,
			Columns: user.LikedPostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.LikedPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.LikedPostsTable,
			Columns: user.LikedPostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.PublishedPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PublishedPostsTable,
			Columns: []string{user.PublishedPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedPublishedPostsIDs(); len(nodes) > 0 && !uu.mutation.PublishedPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PublishedPostsTable,
			Columns: []string{user.PublishedPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.PublishedPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PublishedPostsTable,
			Columns: []string{user.PublishedPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CommentsTable,
			Columns: []string{user.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !uu.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CommentsTable,
			Columns: []string{user.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CommentsTable,
			Columns: []string{user.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.APIKeyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.APIKeyTable,
			Columns: []string{user.APIKeyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.APIKeyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.APIKeyTable,
			Columns: []string{user.APIKeyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(uu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *UserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (uuo *UserUpdateOne) SetUpdatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdatedAt(t)
	return uuo
}

// SetDeletedAt sets the "deleted_at" field.
func (uuo *UserUpdateOne) SetDeletedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetDeletedAt(t)
	return uuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDeletedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetDeletedAt(*t)
	}
	return uuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (uuo *UserUpdateOne) ClearDeletedAt() *UserUpdateOne {
	uuo.mutation.ClearDeletedAt()
	return uuo
}

// SetDeletedBy sets the "deleted_by" field.
func (uuo *UserUpdateOne) SetDeletedBy(s string) *UserUpdateOne {
	uuo.mutation.SetDeletedBy(s)
	return uuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDeletedBy(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetDeletedBy(*s)
	}
	return uuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (uuo *UserUpdateOne) ClearDeletedBy() *UserUpdateOne {
	uuo.mutation.ClearDeletedBy()
	return uuo
}

// SetDisplayName sets the "display_name" field.
func (uuo *UserUpdateOne) SetDisplayName(s string) *UserUpdateOne {
	uuo.mutation.SetDisplayName(s)
	return uuo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDisplayName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetDisplayName(*s)
	}
	return uuo
}

// SetAlias sets the "alias" field.
func (uuo *UserUpdateOne) SetAlias(s string) *UserUpdateOne {
	uuo.mutation.SetAlias(s)
	return uuo
}

// SetNillableAlias sets the "alias" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAlias(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetAlias(*s)
	}
	return uuo
}

// ClearAlias clears the value of the "alias" field.
func (uuo *UserUpdateOne) ClearAlias() *UserUpdateOne {
	uuo.mutation.ClearAlias()
	return uuo
}

// SetProfileImage sets the "profile_image" field.
func (uuo *UserUpdateOne) SetProfileImage(s string) *UserUpdateOne {
	uuo.mutation.SetProfileImage(s)
	return uuo
}

// SetNillableProfileImage sets the "profile_image" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableProfileImage(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetProfileImage(*s)
	}
	return uuo
}

// ClearProfileImage clears the value of the "profile_image" field.
func (uuo *UserUpdateOne) ClearProfileImage() *UserUpdateOne {
	uuo.mutation.ClearProfileImage()
	return uuo
}

// SetExternalID sets the "external_id" field.
func (uuo *UserUpdateOne) SetExternalID(s string) *UserUpdateOne {
	uuo.mutation.SetExternalID(s)
	return uuo
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableExternalID(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetExternalID(*s)
	}
	return uuo
}

// SetAuthProvider sets the "auth_provider" field.
func (uuo *UserUpdateOne) SetAuthProvider(up user.AuthProvider) *UserUpdateOne {
	uuo.mutation.SetAuthProvider(up)
	return uuo
}

// SetNillableAuthProvider sets the "auth_provider" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAuthProvider(up *user.AuthProvider) *UserUpdateOne {
	if up != nil {
		uuo.SetAuthProvider(*up)
	}
	return uuo
}

// SetRole sets the "role" field.
func (uuo *UserUpdateOne) SetRole(u user.Role) *UserUpdateOne {
	uuo.mutation.SetRole(u)
	return uuo
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableRole(u *user.Role) *UserUpdateOne {
	if u != nil {
		uuo.SetRole(*u)
	}
	return uuo
}

// SetLastSeenAt sets the "last_seen_at" field.
func (uuo *UserUpdateOne) SetLastSeenAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetLastSeenAt(t)
	return uuo
}

// ClearLastSeenAt clears the value of the "last_seen_at" field.
func (uuo *UserUpdateOne) ClearLastSeenAt() *UserUpdateOne {
	uuo.mutation.ClearLastSeenAt()
	return uuo
}

// SetLastPostSeenCursor sets the "last_post_seen_cursor" field.
func (uuo *UserUpdateOne) SetLastPostSeenCursor(s string) *UserUpdateOne {
	uuo.mutation.SetLastPostSeenCursor(s)
	return uuo
}

// SetNillableLastPostSeenCursor sets the "last_post_seen_cursor" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLastPostSeenCursor(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetLastPostSeenCursor(*s)
	}
	return uuo
}

// ClearLastPostSeenCursor clears the value of the "last_post_seen_cursor" field.
func (uuo *UserUpdateOne) ClearLastPostSeenCursor() *UserUpdateOne {
	uuo.mutation.ClearLastPostSeenCursor()
	return uuo
}

// SetAwards sets the "awards" field.
func (uuo *UserUpdateOne) SetAwards(s []string) *UserUpdateOne {
	uuo.mutation.SetAwards(s)
	return uuo
}

// AppendAwards appends s to the "awards" field.
func (uuo *UserUpdateOne) AppendAwards(s []string) *UserUpdateOne {
	uuo.mutation.AppendAwards(s)
	return uuo
}

// ClearAwards clears the value of the "awards" field.
func (uuo *UserUpdateOne) ClearAwards() *UserUpdateOne {
	uuo.mutation.ClearAwards()
	return uuo
}

// AddSavedPostIDs adds the "saved_posts" edge to the Post entity by IDs.
func (uuo *UserUpdateOne) AddSavedPostIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddSavedPostIDs(ids...)
	return uuo
}

// AddSavedPosts adds the "saved_posts" edges to the Post entity.
func (uuo *UserUpdateOne) AddSavedPosts(p ...*Post) *UserUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.AddSavedPostIDs(ids...)
}

// AddLikedPostIDs adds the "liked_posts" edge to the Post entity by IDs.
func (uuo *UserUpdateOne) AddLikedPostIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddLikedPostIDs(ids...)
	return uuo
}

// AddLikedPosts adds the "liked_posts" edges to the Post entity.
func (uuo *UserUpdateOne) AddLikedPosts(p ...*Post) *UserUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.AddLikedPostIDs(ids...)
}

// AddPublishedPostIDs adds the "published_posts" edge to the Post entity by IDs.
func (uuo *UserUpdateOne) AddPublishedPostIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddPublishedPostIDs(ids...)
	return uuo
}

// AddPublishedPosts adds the "published_posts" edges to the Post entity.
func (uuo *UserUpdateOne) AddPublishedPosts(p ...*Post) *UserUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.AddPublishedPostIDs(ids...)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (uuo *UserUpdateOne) AddCommentIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddCommentIDs(ids...)
	return uuo
}

// AddComments adds the "comments" edges to the Comment entity.
func (uuo *UserUpdateOne) AddComments(c ...*Comment) *UserUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.AddCommentIDs(ids...)
}

// SetAPIKeyID sets the "api_key" edge to the ApiKey entity by ID.
func (uuo *UserUpdateOne) SetAPIKeyID(id uuid.UUID) *UserUpdateOne {
	uuo.mutation.SetAPIKeyID(id)
	return uuo
}

// SetNillableAPIKeyID sets the "api_key" edge to the ApiKey entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAPIKeyID(id *uuid.UUID) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetAPIKeyID(*id)
	}
	return uuo
}

// SetAPIKey sets the "api_key" edge to the ApiKey entity.
func (uuo *UserUpdateOne) SetAPIKey(a *ApiKey) *UserUpdateOne {
	return uuo.SetAPIKeyID(a.ID)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearSavedPosts clears all "saved_posts" edges to the Post entity.
func (uuo *UserUpdateOne) ClearSavedPosts() *UserUpdateOne {
	uuo.mutation.ClearSavedPosts()
	return uuo
}

// RemoveSavedPostIDs removes the "saved_posts" edge to Post entities by IDs.
func (uuo *UserUpdateOne) RemoveSavedPostIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveSavedPostIDs(ids...)
	return uuo
}

// RemoveSavedPosts removes "saved_posts" edges to Post entities.
func (uuo *UserUpdateOne) RemoveSavedPosts(p ...*Post) *UserUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.RemoveSavedPostIDs(ids...)
}

// ClearLikedPosts clears all "liked_posts" edges to the Post entity.
func (uuo *UserUpdateOne) ClearLikedPosts() *UserUpdateOne {
	uuo.mutation.ClearLikedPosts()
	return uuo
}

// RemoveLikedPostIDs removes the "liked_posts" edge to Post entities by IDs.
func (uuo *UserUpdateOne) RemoveLikedPostIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveLikedPostIDs(ids...)
	return uuo
}

// RemoveLikedPosts removes "liked_posts" edges to Post entities.
func (uuo *UserUpdateOne) RemoveLikedPosts(p ...*Post) *UserUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.RemoveLikedPostIDs(ids...)
}

// ClearPublishedPosts clears all "published_posts" edges to the Post entity.
func (uuo *UserUpdateOne) ClearPublishedPosts() *UserUpdateOne {
	uuo.mutation.ClearPublishedPosts()
	return uuo
}

// RemovePublishedPostIDs removes the "published_posts" edge to Post entities by IDs.
func (uuo *UserUpdateOne) RemovePublishedPostIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemovePublishedPostIDs(ids...)
	return uuo
}

// RemovePublishedPosts removes "published_posts" edges to Post entities.
func (uuo *UserUpdateOne) RemovePublishedPosts(p ...*Post) *UserUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.RemovePublishedPostIDs(ids...)
}

// ClearComments clears all "comments" edges to the Comment entity.
func (uuo *UserUpdateOne) ClearComments() *UserUpdateOne {
	uuo.mutation.ClearComments()
	return uuo
}

// RemoveCommentIDs removes the "comments" edge to Comment entities by IDs.
func (uuo *UserUpdateOne) RemoveCommentIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveCommentIDs(ids...)
	return uuo
}

// RemoveComments removes "comments" edges to Comment entities.
func (uuo *UserUpdateOne) RemoveComments(c ...*Comment) *UserUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.RemoveCommentIDs(ids...)
}

// ClearAPIKey clears the "api_key" edge to the ApiKey entity.
func (uuo *UserUpdateOne) ClearAPIKey() *UserUpdateOne {
	uuo.mutation.ClearAPIKey()
	return uuo
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	if err := uuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uuo *UserUpdateOne) defaults() error {
	if _, ok := uuo.mutation.UpdatedAt(); !ok {
		if user.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized user.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := user.UpdateDefaultUpdatedAt()
		uuo.mutation.SetUpdatedAt(v)
	}
	if _, ok := uuo.mutation.LastSeenAt(); !ok && !uuo.mutation.LastSeenAtCleared() {
		if user.UpdateDefaultLastSeenAt == nil {
			return fmt.Errorf("generated: uninitialized user.UpdateDefaultLastSeenAt (forgotten import generated/runtime?)")
		}
		v := user.UpdateDefaultLastSeenAt()
		uuo.mutation.SetLastSeenAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.AuthProvider(); ok {
		if err := user.AuthProviderValidator(v); err != nil {
			return &ValidationError{Name: "auth_provider", err: fmt.Errorf(`generated: validator failed for field "User.auth_provider": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Role(); ok {
		if err := user.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`generated: validator failed for field "User.role": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uuo *UserUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserUpdateOne {
	uuo.modifiers = append(uuo.modifiers, modifiers...)
	return uuo
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.DeletedAt(); ok {
		_spec.SetField(user.FieldDeletedAt, field.TypeTime, value)
	}
	if uuo.mutation.DeletedAtCleared() {
		_spec.ClearField(user.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := uuo.mutation.DeletedBy(); ok {
		_spec.SetField(user.FieldDeletedBy, field.TypeString, value)
	}
	if uuo.mutation.DeletedByCleared() {
		_spec.ClearField(user.FieldDeletedBy, field.TypeString)
	}
	if value, ok := uuo.mutation.DisplayName(); ok {
		_spec.SetField(user.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Alias(); ok {
		_spec.SetField(user.FieldAlias, field.TypeString, value)
	}
	if uuo.mutation.AliasCleared() {
		_spec.ClearField(user.FieldAlias, field.TypeString)
	}
	if value, ok := uuo.mutation.ProfileImage(); ok {
		_spec.SetField(user.FieldProfileImage, field.TypeString, value)
	}
	if uuo.mutation.ProfileImageCleared() {
		_spec.ClearField(user.FieldProfileImage, field.TypeString)
	}
	if value, ok := uuo.mutation.ExternalID(); ok {
		_spec.SetField(user.FieldExternalID, field.TypeString, value)
	}
	if value, ok := uuo.mutation.AuthProvider(); ok {
		_spec.SetField(user.FieldAuthProvider, field.TypeEnum, value)
	}
	if value, ok := uuo.mutation.Role(); ok {
		_spec.SetField(user.FieldRole, field.TypeEnum, value)
	}
	if value, ok := uuo.mutation.LastSeenAt(); ok {
		_spec.SetField(user.FieldLastSeenAt, field.TypeTime, value)
	}
	if uuo.mutation.LastSeenAtCleared() {
		_spec.ClearField(user.FieldLastSeenAt, field.TypeTime)
	}
	if value, ok := uuo.mutation.LastPostSeenCursor(); ok {
		_spec.SetField(user.FieldLastPostSeenCursor, field.TypeString, value)
	}
	if uuo.mutation.LastPostSeenCursorCleared() {
		_spec.ClearField(user.FieldLastPostSeenCursor, field.TypeString)
	}
	if value, ok := uuo.mutation.Awards(); ok {
		_spec.SetField(user.FieldAwards, field.TypeJSON, value)
	}
	if value, ok := uuo.mutation.AppendedAwards(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, user.FieldAwards, value)
		})
	}
	if uuo.mutation.AwardsCleared() {
		_spec.ClearField(user.FieldAwards, field.TypeJSON)
	}
	if uuo.mutation.SavedPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.SavedPostsTable,
			Columns: user.SavedPostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedSavedPostsIDs(); len(nodes) > 0 && !uuo.mutation.SavedPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.SavedPostsTable,
			Columns: user.SavedPostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.SavedPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.SavedPostsTable,
			Columns: user.SavedPostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.LikedPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.LikedPostsTable,
			Columns: user.LikedPostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedLikedPostsIDs(); len(nodes) > 0 && !uuo.mutation.LikedPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.LikedPostsTable,
			Columns: user.LikedPostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.LikedPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.LikedPostsTable,
			Columns: user.LikedPostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.PublishedPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PublishedPostsTable,
			Columns: []string{user.PublishedPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedPublishedPostsIDs(); len(nodes) > 0 && !uuo.mutation.PublishedPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PublishedPostsTable,
			Columns: []string{user.PublishedPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.PublishedPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PublishedPostsTable,
			Columns: []string{user.PublishedPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CommentsTable,
			Columns: []string{user.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !uuo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CommentsTable,
			Columns: []string{user.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CommentsTable,
			Columns: []string{user.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.APIKeyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.APIKeyTable,
			Columns: []string{user.APIKeyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.APIKeyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.APIKeyTable,
			Columns: []string{user.APIKeyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(uuo.modifiers...)
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
