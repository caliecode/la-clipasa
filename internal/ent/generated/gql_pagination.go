// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"io"
	"strconv"

	"entgo.io/contrib/entgql"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/caliecode/la-clipasa/internal/ent/generated/apikey"
	"github.com/caliecode/la-clipasa/internal/ent/generated/comment"
	"github.com/caliecode/la-clipasa/internal/ent/generated/post"
	"github.com/caliecode/la-clipasa/internal/ent/generated/postcategory"
	"github.com/caliecode/la-clipasa/internal/ent/generated/refreshtoken"
	"github.com/caliecode/la-clipasa/internal/ent/generated/user"
	"github.com/google/uuid"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// Common entgql types.
type (
	Cursor         = entgql.Cursor[uuid.UUID]
	PageInfo       = entgql.PageInfo[uuid.UUID]
	OrderDirection = entgql.OrderDirection
)

func orderFunc(o OrderDirection, field string) func(*sql.Selector) {
	if o == entgql.OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// ApiKeyEdge is the edge representation of ApiKey.
type ApiKeyEdge struct {
	Node   *ApiKey `json:"node"`
	Cursor Cursor  `json:"cursor"`
}

// ApiKeyConnection is the connection containing edges to ApiKey.
type ApiKeyConnection struct {
	Edges      []*ApiKeyEdge `json:"edges"`
	PageInfo   PageInfo      `json:"pageInfo"`
	TotalCount int           `json:"totalCount"`
}

func (c *ApiKeyConnection) build(nodes []*ApiKey, pager *apikeyPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *ApiKey
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *ApiKey {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *ApiKey {
			return nodes[i]
		}
	}
	c.Edges = make([]*ApiKeyEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ApiKeyEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ApiKeyPaginateOption enables pagination customization.
type ApiKeyPaginateOption func(*apikeyPager) error

// WithApiKeyOrder configures pagination ordering.
func WithApiKeyOrder(order *ApiKeyOrder) ApiKeyPaginateOption {
	if order == nil {
		order = DefaultApiKeyOrder
	}
	o := *order
	return func(pager *apikeyPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultApiKeyOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithApiKeyFilter configures pagination filter.
func WithApiKeyFilter(filter func(*ApiKeyQuery) (*ApiKeyQuery, error)) ApiKeyPaginateOption {
	return func(pager *apikeyPager) error {
		if filter == nil {
			return errors.New("ApiKeyQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type apikeyPager struct {
	reverse bool
	order   *ApiKeyOrder
	filter  func(*ApiKeyQuery) (*ApiKeyQuery, error)
}

func newApiKeyPager(opts []ApiKeyPaginateOption, reverse bool) (*apikeyPager, error) {
	pager := &apikeyPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultApiKeyOrder
	}
	return pager, nil
}

func (p *apikeyPager) applyFilter(query *ApiKeyQuery) (*ApiKeyQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *apikeyPager) toCursor(ak *ApiKey) Cursor {
	return p.order.Field.toCursor(ak)
}

func (p *apikeyPager) applyCursors(query *ApiKeyQuery, after, before *Cursor) (*ApiKeyQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultApiKeyOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *apikeyPager) applyOrder(query *ApiKeyQuery) *ApiKeyQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultApiKeyOrder.Field {
		query = query.Order(DefaultApiKeyOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *apikeyPager) orderExpr(query *ApiKeyQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultApiKeyOrder.Field {
			b.Comma().Ident(DefaultApiKeyOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to ApiKey.
func (ak *ApiKeyQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ApiKeyPaginateOption,
) (*ApiKeyConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newApiKeyPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if ak, err = pager.applyFilter(ak); err != nil {
		return nil, err
	}
	conn := &ApiKeyConnection{Edges: []*ApiKeyEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := ak.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if ak, err = pager.applyCursors(ak, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		ak.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := ak.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	ak = pager.applyOrder(ak)
	nodes, err := ak.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// ApiKeyOrderFieldID orders ApiKey by id.
	ApiKeyOrderFieldID = &ApiKeyOrderField{
		Value: func(ak *ApiKey) (ent.Value, error) {
			return ak.ID, nil
		},
		column: apikey.FieldID,
		toTerm: apikey.ByID,
		toCursor: func(ak *ApiKey) Cursor {
			return Cursor{
				ID:    ak.ID,
				Value: ak.ID,
			}
		},
	}
	// ApiKeyOrderFieldUpdatedAt orders ApiKey by updated_at.
	ApiKeyOrderFieldUpdatedAt = &ApiKeyOrderField{
		Value: func(ak *ApiKey) (ent.Value, error) {
			return ak.UpdatedAt, nil
		},
		column: apikey.FieldUpdatedAt,
		toTerm: apikey.ByUpdatedAt,
		toCursor: func(ak *ApiKey) Cursor {
			return Cursor{
				ID:    ak.ID,
				Value: ak.UpdatedAt,
			}
		},
	}
	// ApiKeyOrderFieldCreatedAt orders ApiKey by created_at.
	ApiKeyOrderFieldCreatedAt = &ApiKeyOrderField{
		Value: func(ak *ApiKey) (ent.Value, error) {
			return ak.CreatedAt, nil
		},
		column: apikey.FieldCreatedAt,
		toTerm: apikey.ByCreatedAt,
		toCursor: func(ak *ApiKey) Cursor {
			return Cursor{
				ID:    ak.ID,
				Value: ak.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f ApiKeyOrderField) String() string {
	var str string
	switch f.column {
	case ApiKeyOrderFieldID.column:
		str = "ID"
	case ApiKeyOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	case ApiKeyOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f ApiKeyOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *ApiKeyOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("ApiKeyOrderField %T must be a string", v)
	}
	switch str {
	case "ID":
		*f = *ApiKeyOrderFieldID
	case "UPDATED_AT":
		*f = *ApiKeyOrderFieldUpdatedAt
	case "CREATED_AT":
		*f = *ApiKeyOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid ApiKeyOrderField", str)
	}
	return nil
}

// ApiKeyOrderField defines the ordering field of ApiKey.
type ApiKeyOrderField struct {
	// Value extracts the ordering value from the given ApiKey.
	Value    func(*ApiKey) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) apikey.OrderOption
	toCursor func(*ApiKey) Cursor
}

// ApiKeyOrder defines the ordering of ApiKey.
type ApiKeyOrder struct {
	Direction OrderDirection    `json:"direction"`
	Field     *ApiKeyOrderField `json:"field"`
}

// DefaultApiKeyOrder is the default ordering of ApiKey.
var DefaultApiKeyOrder = &ApiKeyOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ApiKeyOrderField{
		Value: func(ak *ApiKey) (ent.Value, error) {
			return ak.ID, nil
		},
		column: apikey.FieldID,
		toTerm: apikey.ByID,
		toCursor: func(ak *ApiKey) Cursor {
			return Cursor{ID: ak.ID}
		},
	},
}

// ToEdge converts ApiKey into ApiKeyEdge.
func (ak *ApiKey) ToEdge(order *ApiKeyOrder) *ApiKeyEdge {
	if order == nil {
		order = DefaultApiKeyOrder
	}
	return &ApiKeyEdge{
		Node:   ak,
		Cursor: order.Field.toCursor(ak),
	}
}

// CommentEdge is the edge representation of Comment.
type CommentEdge struct {
	Node   *Comment `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// CommentConnection is the connection containing edges to Comment.
type CommentConnection struct {
	Edges      []*CommentEdge `json:"edges"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

func (c *CommentConnection) build(nodes []*Comment, pager *commentPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Comment
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Comment {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Comment {
			return nodes[i]
		}
	}
	c.Edges = make([]*CommentEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &CommentEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// CommentPaginateOption enables pagination customization.
type CommentPaginateOption func(*commentPager) error

// WithCommentOrder configures pagination ordering.
func WithCommentOrder(order *CommentOrder) CommentPaginateOption {
	if order == nil {
		order = DefaultCommentOrder
	}
	o := *order
	return func(pager *commentPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultCommentOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithCommentFilter configures pagination filter.
func WithCommentFilter(filter func(*CommentQuery) (*CommentQuery, error)) CommentPaginateOption {
	return func(pager *commentPager) error {
		if filter == nil {
			return errors.New("CommentQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type commentPager struct {
	reverse bool
	order   *CommentOrder
	filter  func(*CommentQuery) (*CommentQuery, error)
}

func newCommentPager(opts []CommentPaginateOption, reverse bool) (*commentPager, error) {
	pager := &commentPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultCommentOrder
	}
	return pager, nil
}

func (p *commentPager) applyFilter(query *CommentQuery) (*CommentQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *commentPager) toCursor(c *Comment) Cursor {
	return p.order.Field.toCursor(c)
}

func (p *commentPager) applyCursors(query *CommentQuery, after, before *Cursor) (*CommentQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultCommentOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *commentPager) applyOrder(query *CommentQuery) *CommentQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultCommentOrder.Field {
		query = query.Order(DefaultCommentOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *commentPager) orderExpr(query *CommentQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultCommentOrder.Field {
			b.Comma().Ident(DefaultCommentOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Comment.
func (c *CommentQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...CommentPaginateOption,
) (*CommentConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newCommentPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if c, err = pager.applyFilter(c); err != nil {
		return nil, err
	}
	conn := &CommentConnection{Edges: []*CommentEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := c.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if c, err = pager.applyCursors(c, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		c.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := c.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	c = pager.applyOrder(c)
	nodes, err := c.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// CommentOrderFieldID orders Comment by id.
	CommentOrderFieldID = &CommentOrderField{
		Value: func(c *Comment) (ent.Value, error) {
			return c.ID, nil
		},
		column: comment.FieldID,
		toTerm: comment.ByID,
		toCursor: func(c *Comment) Cursor {
			return Cursor{
				ID:    c.ID,
				Value: c.ID,
			}
		},
	}
	// CommentOrderFieldUpdatedAt orders Comment by updated_at.
	CommentOrderFieldUpdatedAt = &CommentOrderField{
		Value: func(c *Comment) (ent.Value, error) {
			return c.UpdatedAt, nil
		},
		column: comment.FieldUpdatedAt,
		toTerm: comment.ByUpdatedAt,
		toCursor: func(c *Comment) Cursor {
			return Cursor{
				ID:    c.ID,
				Value: c.UpdatedAt,
			}
		},
	}
	// CommentOrderFieldCreatedAt orders Comment by created_at.
	CommentOrderFieldCreatedAt = &CommentOrderField{
		Value: func(c *Comment) (ent.Value, error) {
			return c.CreatedAt, nil
		},
		column: comment.FieldCreatedAt,
		toTerm: comment.ByCreatedAt,
		toCursor: func(c *Comment) Cursor {
			return Cursor{
				ID:    c.ID,
				Value: c.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f CommentOrderField) String() string {
	var str string
	switch f.column {
	case CommentOrderFieldID.column:
		str = "ID"
	case CommentOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	case CommentOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f CommentOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *CommentOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("CommentOrderField %T must be a string", v)
	}
	switch str {
	case "ID":
		*f = *CommentOrderFieldID
	case "UPDATED_AT":
		*f = *CommentOrderFieldUpdatedAt
	case "CREATED_AT":
		*f = *CommentOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid CommentOrderField", str)
	}
	return nil
}

// CommentOrderField defines the ordering field of Comment.
type CommentOrderField struct {
	// Value extracts the ordering value from the given Comment.
	Value    func(*Comment) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) comment.OrderOption
	toCursor func(*Comment) Cursor
}

// CommentOrder defines the ordering of Comment.
type CommentOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *CommentOrderField `json:"field"`
}

// DefaultCommentOrder is the default ordering of Comment.
var DefaultCommentOrder = &CommentOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &CommentOrderField{
		Value: func(c *Comment) (ent.Value, error) {
			return c.ID, nil
		},
		column: comment.FieldID,
		toTerm: comment.ByID,
		toCursor: func(c *Comment) Cursor {
			return Cursor{ID: c.ID}
		},
	},
}

// ToEdge converts Comment into CommentEdge.
func (c *Comment) ToEdge(order *CommentOrder) *CommentEdge {
	if order == nil {
		order = DefaultCommentOrder
	}
	return &CommentEdge{
		Node:   c,
		Cursor: order.Field.toCursor(c),
	}
}

// PostEdge is the edge representation of Post.
type PostEdge struct {
	Node   *Post  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// PostConnection is the connection containing edges to Post.
type PostConnection struct {
	Edges      []*PostEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *PostConnection) build(nodes []*Post, pager *postPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Post
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Post {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Post {
			return nodes[i]
		}
	}
	c.Edges = make([]*PostEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &PostEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// PostPaginateOption enables pagination customization.
type PostPaginateOption func(*postPager) error

// WithPostOrder configures pagination ordering.
func WithPostOrder(order *PostOrder) PostPaginateOption {
	if order == nil {
		order = DefaultPostOrder
	}
	o := *order
	return func(pager *postPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultPostOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithPostFilter configures pagination filter.
func WithPostFilter(filter func(*PostQuery) (*PostQuery, error)) PostPaginateOption {
	return func(pager *postPager) error {
		if filter == nil {
			return errors.New("PostQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type postPager struct {
	reverse bool
	order   *PostOrder
	filter  func(*PostQuery) (*PostQuery, error)
}

func newPostPager(opts []PostPaginateOption, reverse bool) (*postPager, error) {
	pager := &postPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultPostOrder
	}
	return pager, nil
}

func (p *postPager) applyFilter(query *PostQuery) (*PostQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *postPager) toCursor(po *Post) Cursor {
	return p.order.Field.toCursor(po)
}

func (p *postPager) applyCursors(query *PostQuery, after, before *Cursor) (*PostQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultPostOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *postPager) applyOrder(query *PostQuery) *PostQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultPostOrder.Field {
		query = query.Order(DefaultPostOrder.Field.toTerm(direction.OrderTermOption()))
	}
	switch p.order.Field.column {
	case PostOrderFieldCommentsCount.column, PostOrderFieldLikedByCount.column:
	default:
		if len(query.ctx.Fields) > 0 {
			query.ctx.AppendFieldOnce(p.order.Field.column)
		}
	}
	return query
}

func (p *postPager) orderExpr(query *PostQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	switch p.order.Field.column {
	case PostOrderFieldCommentsCount.column, PostOrderFieldLikedByCount.column:
		query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	default:
		if len(query.ctx.Fields) > 0 {
			query.ctx.AppendFieldOnce(p.order.Field.column)
		}
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultPostOrder.Field {
			b.Comma().Ident(DefaultPostOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Post.
func (po *PostQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...PostPaginateOption,
) (*PostConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newPostPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if po, err = pager.applyFilter(po); err != nil {
		return nil, err
	}
	conn := &PostConnection{Edges: []*PostEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := po.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if po, err = pager.applyCursors(po, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		po.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := po.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	po = pager.applyOrder(po)
	nodes, err := po.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// PostOrderFieldID orders Post by id.
	PostOrderFieldID = &PostOrderField{
		Value: func(po *Post) (ent.Value, error) {
			return po.ID, nil
		},
		column: post.FieldID,
		toTerm: post.ByID,
		toCursor: func(po *Post) Cursor {
			return Cursor{
				ID:    po.ID,
				Value: po.ID,
			}
		},
	}
	// PostOrderFieldUpdatedAt orders Post by updated_at.
	PostOrderFieldUpdatedAt = &PostOrderField{
		Value: func(po *Post) (ent.Value, error) {
			return po.UpdatedAt, nil
		},
		column: post.FieldUpdatedAt,
		toTerm: post.ByUpdatedAt,
		toCursor: func(po *Post) Cursor {
			return Cursor{
				ID:    po.ID,
				Value: po.UpdatedAt,
			}
		},
	}
	// PostOrderFieldCreatedAt orders Post by created_at.
	PostOrderFieldCreatedAt = &PostOrderField{
		Value: func(po *Post) (ent.Value, error) {
			return po.CreatedAt, nil
		},
		column: post.FieldCreatedAt,
		toTerm: post.ByCreatedAt,
		toCursor: func(po *Post) Cursor {
			return Cursor{
				ID:    po.ID,
				Value: po.CreatedAt,
			}
		},
	}
	// PostOrderFieldModeratedAt orders Post by moderated_at.
	PostOrderFieldModeratedAt = &PostOrderField{
		Value: func(po *Post) (ent.Value, error) {
			return po.ModeratedAt, nil
		},
		column: post.FieldModeratedAt,
		toTerm: post.ByModeratedAt,
		toCursor: func(po *Post) Cursor {
			return Cursor{
				ID:    po.ID,
				Value: po.ModeratedAt,
			}
		},
	}
	// PostOrderFieldCommentsCount orders by COMMENTS_COUNT.
	PostOrderFieldCommentsCount = &PostOrderField{
		Value: func(po *Post) (ent.Value, error) {
			return po.Value("comments_count")
		},
		column: "comments_count",
		toTerm: func(opts ...sql.OrderTermOption) post.OrderOption {
			return post.ByCommentsCount(
				append(opts, sql.OrderSelectAs("comments_count"))...,
			)
		},
		toCursor: func(po *Post) Cursor {
			cv, _ := po.Value("comments_count")
			return Cursor{
				ID:    po.ID,
				Value: cv,
			}
		},
	}
	// PostOrderFieldLikedByCount orders by LIKED_BY_COUNT.
	PostOrderFieldLikedByCount = &PostOrderField{
		Value: func(po *Post) (ent.Value, error) {
			return po.Value("liked_by_count")
		},
		column: "liked_by_count",
		toTerm: func(opts ...sql.OrderTermOption) post.OrderOption {
			return post.ByLikedByCount(
				append(opts, sql.OrderSelectAs("liked_by_count"))...,
			)
		},
		toCursor: func(po *Post) Cursor {
			cv, _ := po.Value("liked_by_count")
			return Cursor{
				ID:    po.ID,
				Value: cv,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f PostOrderField) String() string {
	var str string
	switch f.column {
	case PostOrderFieldID.column:
		str = "ID"
	case PostOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	case PostOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case PostOrderFieldModeratedAt.column:
		str = "MODERATED_AT"
	case PostOrderFieldCommentsCount.column:
		str = "COMMENTS_COUNT"
	case PostOrderFieldLikedByCount.column:
		str = "LIKED_BY_COUNT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f PostOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *PostOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("PostOrderField %T must be a string", v)
	}
	switch str {
	case "ID":
		*f = *PostOrderFieldID
	case "UPDATED_AT":
		*f = *PostOrderFieldUpdatedAt
	case "CREATED_AT":
		*f = *PostOrderFieldCreatedAt
	case "MODERATED_AT":
		*f = *PostOrderFieldModeratedAt
	case "COMMENTS_COUNT":
		*f = *PostOrderFieldCommentsCount
	case "LIKED_BY_COUNT":
		*f = *PostOrderFieldLikedByCount
	default:
		return fmt.Errorf("%s is not a valid PostOrderField", str)
	}
	return nil
}

// PostOrderField defines the ordering field of Post.
type PostOrderField struct {
	// Value extracts the ordering value from the given Post.
	Value    func(*Post) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) post.OrderOption
	toCursor func(*Post) Cursor
}

// PostOrder defines the ordering of Post.
type PostOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *PostOrderField `json:"field"`
}

// DefaultPostOrder is the default ordering of Post.
var DefaultPostOrder = &PostOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &PostOrderField{
		Value: func(po *Post) (ent.Value, error) {
			return po.ID, nil
		},
		column: post.FieldID,
		toTerm: post.ByID,
		toCursor: func(po *Post) Cursor {
			return Cursor{ID: po.ID}
		},
	},
}

// ToEdge converts Post into PostEdge.
func (po *Post) ToEdge(order *PostOrder) *PostEdge {
	if order == nil {
		order = DefaultPostOrder
	}
	return &PostEdge{
		Node:   po,
		Cursor: order.Field.toCursor(po),
	}
}

// PostCategoryEdge is the edge representation of PostCategory.
type PostCategoryEdge struct {
	Node   *PostCategory `json:"node"`
	Cursor Cursor        `json:"cursor"`
}

// PostCategoryConnection is the connection containing edges to PostCategory.
type PostCategoryConnection struct {
	Edges      []*PostCategoryEdge `json:"edges"`
	PageInfo   PageInfo            `json:"pageInfo"`
	TotalCount int                 `json:"totalCount"`
}

func (c *PostCategoryConnection) build(nodes []*PostCategory, pager *postcategoryPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *PostCategory
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *PostCategory {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *PostCategory {
			return nodes[i]
		}
	}
	c.Edges = make([]*PostCategoryEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &PostCategoryEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// PostCategoryPaginateOption enables pagination customization.
type PostCategoryPaginateOption func(*postcategoryPager) error

// WithPostCategoryOrder configures pagination ordering.
func WithPostCategoryOrder(order *PostCategoryOrder) PostCategoryPaginateOption {
	if order == nil {
		order = DefaultPostCategoryOrder
	}
	o := *order
	return func(pager *postcategoryPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultPostCategoryOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithPostCategoryFilter configures pagination filter.
func WithPostCategoryFilter(filter func(*PostCategoryQuery) (*PostCategoryQuery, error)) PostCategoryPaginateOption {
	return func(pager *postcategoryPager) error {
		if filter == nil {
			return errors.New("PostCategoryQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type postcategoryPager struct {
	reverse bool
	order   *PostCategoryOrder
	filter  func(*PostCategoryQuery) (*PostCategoryQuery, error)
}

func newPostCategoryPager(opts []PostCategoryPaginateOption, reverse bool) (*postcategoryPager, error) {
	pager := &postcategoryPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultPostCategoryOrder
	}
	return pager, nil
}

func (p *postcategoryPager) applyFilter(query *PostCategoryQuery) (*PostCategoryQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *postcategoryPager) toCursor(pc *PostCategory) Cursor {
	return p.order.Field.toCursor(pc)
}

func (p *postcategoryPager) applyCursors(query *PostCategoryQuery, after, before *Cursor) (*PostCategoryQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultPostCategoryOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *postcategoryPager) applyOrder(query *PostCategoryQuery) *PostCategoryQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultPostCategoryOrder.Field {
		query = query.Order(DefaultPostCategoryOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *postcategoryPager) orderExpr(query *PostCategoryQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultPostCategoryOrder.Field {
			b.Comma().Ident(DefaultPostCategoryOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to PostCategory.
func (pc *PostCategoryQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...PostCategoryPaginateOption,
) (*PostCategoryConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newPostCategoryPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if pc, err = pager.applyFilter(pc); err != nil {
		return nil, err
	}
	conn := &PostCategoryConnection{Edges: []*PostCategoryEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := pc.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if pc, err = pager.applyCursors(pc, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		pc.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := pc.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	pc = pager.applyOrder(pc)
	nodes, err := pc.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// PostCategoryOrderFieldID orders PostCategory by id.
	PostCategoryOrderFieldID = &PostCategoryOrderField{
		Value: func(pc *PostCategory) (ent.Value, error) {
			return pc.ID, nil
		},
		column: postcategory.FieldID,
		toTerm: postcategory.ByID,
		toCursor: func(pc *PostCategory) Cursor {
			return Cursor{
				ID:    pc.ID,
				Value: pc.ID,
			}
		},
	}
	// PostCategoryOrderFieldUpdatedAt orders PostCategory by updated_at.
	PostCategoryOrderFieldUpdatedAt = &PostCategoryOrderField{
		Value: func(pc *PostCategory) (ent.Value, error) {
			return pc.UpdatedAt, nil
		},
		column: postcategory.FieldUpdatedAt,
		toTerm: postcategory.ByUpdatedAt,
		toCursor: func(pc *PostCategory) Cursor {
			return Cursor{
				ID:    pc.ID,
				Value: pc.UpdatedAt,
			}
		},
	}
	// PostCategoryOrderFieldCreatedAt orders PostCategory by created_at.
	PostCategoryOrderFieldCreatedAt = &PostCategoryOrderField{
		Value: func(pc *PostCategory) (ent.Value, error) {
			return pc.CreatedAt, nil
		},
		column: postcategory.FieldCreatedAt,
		toTerm: postcategory.ByCreatedAt,
		toCursor: func(pc *PostCategory) Cursor {
			return Cursor{
				ID:    pc.ID,
				Value: pc.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f PostCategoryOrderField) String() string {
	var str string
	switch f.column {
	case PostCategoryOrderFieldID.column:
		str = "ID"
	case PostCategoryOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	case PostCategoryOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f PostCategoryOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *PostCategoryOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("PostCategoryOrderField %T must be a string", v)
	}
	switch str {
	case "ID":
		*f = *PostCategoryOrderFieldID
	case "UPDATED_AT":
		*f = *PostCategoryOrderFieldUpdatedAt
	case "CREATED_AT":
		*f = *PostCategoryOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid PostCategoryOrderField", str)
	}
	return nil
}

// PostCategoryOrderField defines the ordering field of PostCategory.
type PostCategoryOrderField struct {
	// Value extracts the ordering value from the given PostCategory.
	Value    func(*PostCategory) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) postcategory.OrderOption
	toCursor func(*PostCategory) Cursor
}

// PostCategoryOrder defines the ordering of PostCategory.
type PostCategoryOrder struct {
	Direction OrderDirection          `json:"direction"`
	Field     *PostCategoryOrderField `json:"field"`
}

// DefaultPostCategoryOrder is the default ordering of PostCategory.
var DefaultPostCategoryOrder = &PostCategoryOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &PostCategoryOrderField{
		Value: func(pc *PostCategory) (ent.Value, error) {
			return pc.ID, nil
		},
		column: postcategory.FieldID,
		toTerm: postcategory.ByID,
		toCursor: func(pc *PostCategory) Cursor {
			return Cursor{ID: pc.ID}
		},
	},
}

// ToEdge converts PostCategory into PostCategoryEdge.
func (pc *PostCategory) ToEdge(order *PostCategoryOrder) *PostCategoryEdge {
	if order == nil {
		order = DefaultPostCategoryOrder
	}
	return &PostCategoryEdge{
		Node:   pc,
		Cursor: order.Field.toCursor(pc),
	}
}

// RefreshTokenEdge is the edge representation of RefreshToken.
type RefreshTokenEdge struct {
	Node   *RefreshToken `json:"node"`
	Cursor Cursor        `json:"cursor"`
}

// RefreshTokenConnection is the connection containing edges to RefreshToken.
type RefreshTokenConnection struct {
	Edges      []*RefreshTokenEdge `json:"edges"`
	PageInfo   PageInfo            `json:"pageInfo"`
	TotalCount int                 `json:"totalCount"`
}

func (c *RefreshTokenConnection) build(nodes []*RefreshToken, pager *refreshtokenPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *RefreshToken
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *RefreshToken {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *RefreshToken {
			return nodes[i]
		}
	}
	c.Edges = make([]*RefreshTokenEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &RefreshTokenEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// RefreshTokenPaginateOption enables pagination customization.
type RefreshTokenPaginateOption func(*refreshtokenPager) error

// WithRefreshTokenOrder configures pagination ordering.
func WithRefreshTokenOrder(order *RefreshTokenOrder) RefreshTokenPaginateOption {
	if order == nil {
		order = DefaultRefreshTokenOrder
	}
	o := *order
	return func(pager *refreshtokenPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultRefreshTokenOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithRefreshTokenFilter configures pagination filter.
func WithRefreshTokenFilter(filter func(*RefreshTokenQuery) (*RefreshTokenQuery, error)) RefreshTokenPaginateOption {
	return func(pager *refreshtokenPager) error {
		if filter == nil {
			return errors.New("RefreshTokenQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type refreshtokenPager struct {
	reverse bool
	order   *RefreshTokenOrder
	filter  func(*RefreshTokenQuery) (*RefreshTokenQuery, error)
}

func newRefreshTokenPager(opts []RefreshTokenPaginateOption, reverse bool) (*refreshtokenPager, error) {
	pager := &refreshtokenPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultRefreshTokenOrder
	}
	return pager, nil
}

func (p *refreshtokenPager) applyFilter(query *RefreshTokenQuery) (*RefreshTokenQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *refreshtokenPager) toCursor(rt *RefreshToken) Cursor {
	return p.order.Field.toCursor(rt)
}

func (p *refreshtokenPager) applyCursors(query *RefreshTokenQuery, after, before *Cursor) (*RefreshTokenQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultRefreshTokenOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *refreshtokenPager) applyOrder(query *RefreshTokenQuery) *RefreshTokenQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultRefreshTokenOrder.Field {
		query = query.Order(DefaultRefreshTokenOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *refreshtokenPager) orderExpr(query *RefreshTokenQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultRefreshTokenOrder.Field {
			b.Comma().Ident(DefaultRefreshTokenOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to RefreshToken.
func (rt *RefreshTokenQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...RefreshTokenPaginateOption,
) (*RefreshTokenConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newRefreshTokenPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if rt, err = pager.applyFilter(rt); err != nil {
		return nil, err
	}
	conn := &RefreshTokenConnection{Edges: []*RefreshTokenEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := rt.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if rt, err = pager.applyCursors(rt, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		rt.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := rt.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	rt = pager.applyOrder(rt)
	nodes, err := rt.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// RefreshTokenOrderFieldUpdatedAt orders RefreshToken by updated_at.
	RefreshTokenOrderFieldUpdatedAt = &RefreshTokenOrderField{
		Value: func(rt *RefreshToken) (ent.Value, error) {
			return rt.UpdatedAt, nil
		},
		column: refreshtoken.FieldUpdatedAt,
		toTerm: refreshtoken.ByUpdatedAt,
		toCursor: func(rt *RefreshToken) Cursor {
			return Cursor{
				ID:    rt.ID,
				Value: rt.UpdatedAt,
			}
		},
	}
	// RefreshTokenOrderFieldCreatedAt orders RefreshToken by created_at.
	RefreshTokenOrderFieldCreatedAt = &RefreshTokenOrderField{
		Value: func(rt *RefreshToken) (ent.Value, error) {
			return rt.CreatedAt, nil
		},
		column: refreshtoken.FieldCreatedAt,
		toTerm: refreshtoken.ByCreatedAt,
		toCursor: func(rt *RefreshToken) Cursor {
			return Cursor{
				ID:    rt.ID,
				Value: rt.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f RefreshTokenOrderField) String() string {
	var str string
	switch f.column {
	case RefreshTokenOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	case RefreshTokenOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f RefreshTokenOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *RefreshTokenOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("RefreshTokenOrderField %T must be a string", v)
	}
	switch str {
	case "UPDATED_AT":
		*f = *RefreshTokenOrderFieldUpdatedAt
	case "CREATED_AT":
		*f = *RefreshTokenOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid RefreshTokenOrderField", str)
	}
	return nil
}

// RefreshTokenOrderField defines the ordering field of RefreshToken.
type RefreshTokenOrderField struct {
	// Value extracts the ordering value from the given RefreshToken.
	Value    func(*RefreshToken) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) refreshtoken.OrderOption
	toCursor func(*RefreshToken) Cursor
}

// RefreshTokenOrder defines the ordering of RefreshToken.
type RefreshTokenOrder struct {
	Direction OrderDirection          `json:"direction"`
	Field     *RefreshTokenOrderField `json:"field"`
}

// DefaultRefreshTokenOrder is the default ordering of RefreshToken.
var DefaultRefreshTokenOrder = &RefreshTokenOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &RefreshTokenOrderField{
		Value: func(rt *RefreshToken) (ent.Value, error) {
			return rt.ID, nil
		},
		column: refreshtoken.FieldID,
		toTerm: refreshtoken.ByID,
		toCursor: func(rt *RefreshToken) Cursor {
			return Cursor{ID: rt.ID}
		},
	},
}

// ToEdge converts RefreshToken into RefreshTokenEdge.
func (rt *RefreshToken) ToEdge(order *RefreshTokenOrder) *RefreshTokenEdge {
	if order == nil {
		order = DefaultRefreshTokenOrder
	}
	return &RefreshTokenEdge{
		Node:   rt,
		Cursor: order.Field.toCursor(rt),
	}
}

// UserEdge is the edge representation of User.
type UserEdge struct {
	Node   *User  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// UserConnection is the connection containing edges to User.
type UserConnection struct {
	Edges      []*UserEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *UserConnection) build(nodes []*User, pager *userPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *User
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *User {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *User {
			return nodes[i]
		}
	}
	c.Edges = make([]*UserEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &UserEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// UserPaginateOption enables pagination customization.
type UserPaginateOption func(*userPager) error

// WithUserOrder configures pagination ordering.
func WithUserOrder(order *UserOrder) UserPaginateOption {
	if order == nil {
		order = DefaultUserOrder
	}
	o := *order
	return func(pager *userPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultUserOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithUserFilter configures pagination filter.
func WithUserFilter(filter func(*UserQuery) (*UserQuery, error)) UserPaginateOption {
	return func(pager *userPager) error {
		if filter == nil {
			return errors.New("UserQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type userPager struct {
	reverse bool
	order   *UserOrder
	filter  func(*UserQuery) (*UserQuery, error)
}

func newUserPager(opts []UserPaginateOption, reverse bool) (*userPager, error) {
	pager := &userPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultUserOrder
	}
	return pager, nil
}

func (p *userPager) applyFilter(query *UserQuery) (*UserQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *userPager) toCursor(u *User) Cursor {
	return p.order.Field.toCursor(u)
}

func (p *userPager) applyCursors(query *UserQuery, after, before *Cursor) (*UserQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultUserOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *userPager) applyOrder(query *UserQuery) *UserQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultUserOrder.Field {
		query = query.Order(DefaultUserOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *userPager) orderExpr(query *UserQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultUserOrder.Field {
			b.Comma().Ident(DefaultUserOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to User.
func (u *UserQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...UserPaginateOption,
) (*UserConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newUserPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if u, err = pager.applyFilter(u); err != nil {
		return nil, err
	}
	conn := &UserConnection{Edges: []*UserEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := u.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if u, err = pager.applyCursors(u, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		u.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := u.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	u = pager.applyOrder(u)
	nodes, err := u.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// UserOrderFieldID orders User by id.
	UserOrderFieldID = &UserOrderField{
		Value: func(u *User) (ent.Value, error) {
			return u.ID, nil
		},
		column: user.FieldID,
		toTerm: user.ByID,
		toCursor: func(u *User) Cursor {
			return Cursor{
				ID:    u.ID,
				Value: u.ID,
			}
		},
	}
	// UserOrderFieldUpdatedAt orders User by updated_at.
	UserOrderFieldUpdatedAt = &UserOrderField{
		Value: func(u *User) (ent.Value, error) {
			return u.UpdatedAt, nil
		},
		column: user.FieldUpdatedAt,
		toTerm: user.ByUpdatedAt,
		toCursor: func(u *User) Cursor {
			return Cursor{
				ID:    u.ID,
				Value: u.UpdatedAt,
			}
		},
	}
	// UserOrderFieldCreatedAt orders User by created_at.
	UserOrderFieldCreatedAt = &UserOrderField{
		Value: func(u *User) (ent.Value, error) {
			return u.CreatedAt, nil
		},
		column: user.FieldCreatedAt,
		toTerm: user.ByCreatedAt,
		toCursor: func(u *User) Cursor {
			return Cursor{
				ID:    u.ID,
				Value: u.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f UserOrderField) String() string {
	var str string
	switch f.column {
	case UserOrderFieldID.column:
		str = "ID"
	case UserOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	case UserOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f UserOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *UserOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("UserOrderField %T must be a string", v)
	}
	switch str {
	case "ID":
		*f = *UserOrderFieldID
	case "UPDATED_AT":
		*f = *UserOrderFieldUpdatedAt
	case "CREATED_AT":
		*f = *UserOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid UserOrderField", str)
	}
	return nil
}

// UserOrderField defines the ordering field of User.
type UserOrderField struct {
	// Value extracts the ordering value from the given User.
	Value    func(*User) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) user.OrderOption
	toCursor func(*User) Cursor
}

// UserOrder defines the ordering of User.
type UserOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *UserOrderField `json:"field"`
}

// DefaultUserOrder is the default ordering of User.
var DefaultUserOrder = &UserOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &UserOrderField{
		Value: func(u *User) (ent.Value, error) {
			return u.ID, nil
		},
		column: user.FieldID,
		toTerm: user.ByID,
		toCursor: func(u *User) Cursor {
			return Cursor{ID: u.ID}
		},
	},
}

// ToEdge converts User into UserEdge.
func (u *User) ToEdge(order *UserOrder) *UserEdge {
	if order == nil {
		order = DefaultUserOrder
	}
	return &UserEdge{
		Node:   u,
		Cursor: order.Field.toCursor(u),
	}
}
