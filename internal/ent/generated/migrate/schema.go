// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// APIKeysColumns holds the columns for the "api_keys" table.
	APIKeysColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "api_key", Type: field.TypeString},
		{Name: "expires_on", Type: field.TypeTime},
		{Name: "owner_id", Type: field.TypeUUID, Unique: true},
	}
	// APIKeysTable holds the schema information for the "api_keys" table.
	APIKeysTable = &schema.Table{
		Name:       "api_keys",
		Columns:    APIKeysColumns,
		PrimaryKey: []*schema.Column{APIKeysColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "api_keys_users_api_key",
				Columns:    []*schema.Column{APIKeysColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// CommentsColumns holds the columns for the "comments" table.
	CommentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "content", Type: field.TypeString},
		{Name: "post_comments", Type: field.TypeUUID, Nullable: true},
		{Name: "owner_id", Type: field.TypeUUID},
	}
	// CommentsTable holds the schema information for the "comments" table.
	CommentsTable = &schema.Table{
		Name:       "comments",
		Columns:    CommentsColumns,
		PrimaryKey: []*schema.Column{CommentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "comments_posts_comments",
				Columns:    []*schema.Column{CommentsColumns[6]},
				RefColumns: []*schema.Column{PostsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "comments_users_comments",
				Columns:    []*schema.Column{CommentsColumns[7]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "comment_owner_id",
				Unique:  false,
				Columns: []*schema.Column{CommentsColumns[7]},
				Annotation: &entsql.IndexAnnotation{
					Where: "deleted_at is NULL",
				},
			},
		},
	}
	// PostsColumns holds the columns for the "posts" table.
	PostsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "pinned", Type: field.TypeBool, Default: false},
		{Name: "title", Type: field.TypeString},
		{Name: "content", Type: field.TypeString, Nullable: true},
		{Name: "link", Type: field.TypeString},
		{Name: "moderation_comment", Type: field.TypeString, Nullable: true},
		{Name: "is_moderated", Type: field.TypeBool, Default: false},
		{Name: "entity_vector", Type: field.TypeString, Nullable: true, Size: 2147483647, Default: "", SchemaType: map[string]string{"postgres": "tsvector"}},
		{Name: "owner_id", Type: field.TypeUUID},
	}
	// PostsTable holds the schema information for the "posts" table.
	PostsTable = &schema.Table{
		Name:       "posts",
		Columns:    PostsColumns,
		PrimaryKey: []*schema.Column{PostsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "posts_users_published_posts",
				Columns:    []*schema.Column{PostsColumns[12]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "post_owner_id",
				Unique:  false,
				Columns: []*schema.Column{PostsColumns[12]},
				Annotation: &entsql.IndexAnnotation{
					Where: "deleted_at is NULL",
				},
			},
			{
				Name:    "post_entity_vector",
				Unique:  false,
				Columns: []*schema.Column{PostsColumns[11]},
				Annotation: &entsql.IndexAnnotation{
					Type: "GIN",
				},
			},
			{
				Name:    "post_title",
				Unique:  false,
				Columns: []*schema.Column{PostsColumns[6]},
				Annotation: &entsql.IndexAnnotation{
					Type: "GIN",
				},
			},
		},
	}
	// PostCategoriesColumns holds the columns for the "post_categories" table.
	PostCategoriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "category", Type: field.TypeEnum, Enums: []string{"RANA", "SIN_SONIDO", "MEME_ARTESANAL", "NO_SE_YO", "ORO", "DIAMANTE", "MEH", "ALERTA_GLONETILLO", "GRR", "ENSORDECEDOR", "RAGUUUL"}},
		{Name: "post_categories", Type: field.TypeUUID, Nullable: true},
	}
	// PostCategoriesTable holds the schema information for the "post_categories" table.
	PostCategoriesTable = &schema.Table{
		Name:       "post_categories",
		Columns:    PostCategoriesColumns,
		PrimaryKey: []*schema.Column{PostCategoriesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "post_categories_posts_categories",
				Columns:    []*schema.Column{PostCategoriesColumns[4]},
				RefColumns: []*schema.Column{PostsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "postcategory_category_post_categories",
				Unique:  true,
				Columns: []*schema.Column{PostCategoriesColumns[3], PostCategoriesColumns[4]},
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "display_name", Type: field.TypeString},
		{Name: "alias", Type: field.TypeString, Nullable: true},
		{Name: "profile_image", Type: field.TypeString, Nullable: true},
		{Name: "external_id", Type: field.TypeString, Unique: true},
		{Name: "auth_provider", Type: field.TypeEnum, Enums: []string{"TWITCH"}, Default: "TWITCH"},
		{Name: "role", Type: field.TypeEnum, Enums: []string{"GUEST", "USER", "ADMIN", "MODERATOR"}, Default: "GUEST"},
		{Name: "last_seen_at", Type: field.TypeTime, Nullable: true},
		{Name: "last_post_seen_cursor", Type: field.TypeString, Nullable: true},
		{Name: "awards", Type: field.TypeJSON, Nullable: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// UserSavedPostsColumns holds the columns for the "user_saved_posts" table.
	UserSavedPostsColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeUUID},
		{Name: "post_id", Type: field.TypeUUID},
	}
	// UserSavedPostsTable holds the schema information for the "user_saved_posts" table.
	UserSavedPostsTable = &schema.Table{
		Name:       "user_saved_posts",
		Columns:    UserSavedPostsColumns,
		PrimaryKey: []*schema.Column{UserSavedPostsColumns[0], UserSavedPostsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_saved_posts_user_id",
				Columns:    []*schema.Column{UserSavedPostsColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_saved_posts_post_id",
				Columns:    []*schema.Column{UserSavedPostsColumns[1]},
				RefColumns: []*schema.Column{PostsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UserLikedPostsColumns holds the columns for the "user_liked_posts" table.
	UserLikedPostsColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeUUID},
		{Name: "post_id", Type: field.TypeUUID},
	}
	// UserLikedPostsTable holds the schema information for the "user_liked_posts" table.
	UserLikedPostsTable = &schema.Table{
		Name:       "user_liked_posts",
		Columns:    UserLikedPostsColumns,
		PrimaryKey: []*schema.Column{UserLikedPostsColumns[0], UserLikedPostsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_liked_posts_user_id",
				Columns:    []*schema.Column{UserLikedPostsColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_liked_posts_post_id",
				Columns:    []*schema.Column{UserLikedPostsColumns[1]},
				RefColumns: []*schema.Column{PostsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		APIKeysTable,
		CommentsTable,
		PostsTable,
		PostCategoriesTable,
		UsersTable,
		UserSavedPostsTable,
		UserLikedPostsTable,
	}
)

func init() {
	APIKeysTable.ForeignKeys[0].RefTable = UsersTable
	CommentsTable.ForeignKeys[0].RefTable = PostsTable
	CommentsTable.ForeignKeys[1].RefTable = UsersTable
	PostsTable.ForeignKeys[0].RefTable = UsersTable
	PostCategoriesTable.ForeignKeys[0].RefTable = PostsTable
	UserSavedPostsTable.ForeignKeys[0].RefTable = UsersTable
	UserSavedPostsTable.ForeignKeys[1].RefTable = PostsTable
	UserLikedPostsTable.ForeignKeys[0].RefTable = UsersTable
	UserLikedPostsTable.ForeignKeys[1].RefTable = PostsTable
}
