// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"encoding/json"

	"github.com/google/uuid"
	"github.com/laclipasa/la-clipasa/internal/ent/generated/apikey"
	"github.com/laclipasa/la-clipasa/internal/ent/generated/comment"
	"github.com/laclipasa/la-clipasa/internal/ent/generated/post"
	"github.com/laclipasa/la-clipasa/internal/ent/generated/postcategory"
	"github.com/laclipasa/la-clipasa/internal/ent/generated/user"
)

// Node in the graph.
type Node struct {
	ID     uuid.UUID `json:"id,omitempty"`     // node id.
	Type   string    `json:"type,omitempty"`   // node type.
	Fields []*Field  `json:"fields,omitempty"` // node fields.
	Edges  []*Edge   `json:"edges,omitempty"`  // node edges.
}

// Field of a node.
type Field struct {
	Type  string `json:"type,omitempty"`  // field type.
	Name  string `json:"name,omitempty"`  // field name (as in struct).
	Value string `json:"value,omitempty"` // stringified value.
}

// Edges between two nodes.
type Edge struct {
	Type string      `json:"type,omitempty"` // edge type.
	Name string      `json:"name,omitempty"` // edge name.
	IDs  []uuid.UUID `json:"ids,omitempty"`  // node ids (where this edge point to).
}

// Node implements Noder interface
func (ak *ApiKey) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     ak.ID,
		Type:   "ApiKey",
		Fields: make([]*Field, 4),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(ak.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ak.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ak.APIKey); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "api_key",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ak.ExpiresOn); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "time.Time",
		Name:  "expires_on",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "User",
		Name: "owner",
	}
	err = ak.QueryOwner().
		Select(user.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

// Node implements Noder interface
func (c *Comment) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     c.ID,
		Type:   "Comment",
		Fields: make([]*Field, 5),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(c.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.DeletedAt); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "time.Time",
		Name:  "deleted_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.DeletedBy); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "deleted_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.Content); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "string",
		Name:  "content",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "User",
		Name: "owner",
	}
	err = c.QueryOwner().
		Select(user.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Post",
		Name: "post",
	}
	err = c.QueryPost().
		Select(post.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

// Node implements Noder interface
func (po *Post) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     po.ID,
		Type:   "Post",
		Fields: make([]*Field, 11),
		Edges:  make([]*Edge, 5),
	}
	var buf []byte
	if buf, err = json.Marshal(po.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(po.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(po.DeletedAt); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "time.Time",
		Name:  "deleted_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(po.DeletedBy); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "deleted_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(po.Pinned); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "bool",
		Name:  "pinned",
		Value: string(buf),
	}
	if buf, err = json.Marshal(po.Title); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "title",
		Value: string(buf),
	}
	if buf, err = json.Marshal(po.Content); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "string",
		Name:  "content",
		Value: string(buf),
	}
	if buf, err = json.Marshal(po.Link); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "string",
		Name:  "link",
		Value: string(buf),
	}
	if buf, err = json.Marshal(po.ModerationComment); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "string",
		Name:  "moderation_comment",
		Value: string(buf),
	}
	if buf, err = json.Marshal(po.IsModerated); err != nil {
		return nil, err
	}
	node.Fields[9] = &Field{
		Type:  "bool",
		Name:  "is_moderated",
		Value: string(buf),
	}
	if buf, err = json.Marshal(po.EntityVector); err != nil {
		return nil, err
	}
	node.Fields[10] = &Field{
		Type:  "string",
		Name:  "entity_vector",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "User",
		Name: "owner",
	}
	err = po.QueryOwner().
		Select(user.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Comment",
		Name: "comments",
	}
	err = po.QueryComments().
		Select(comment.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "User",
		Name: "saved_by",
	}
	err = po.QuerySavedBy().
		Select(user.FieldID).
		Scan(ctx, &node.Edges[2].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "User",
		Name: "liked_by",
	}
	err = po.QueryLikedBy().
		Select(user.FieldID).
		Scan(ctx, &node.Edges[3].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[4] = &Edge{
		Type: "PostCategory",
		Name: "categories",
	}
	err = po.QueryCategories().
		Select(postcategory.FieldID).
		Scan(ctx, &node.Edges[4].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

// Node implements Noder interface
func (pc *PostCategory) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     pc.ID,
		Type:   "PostCategory",
		Fields: make([]*Field, 3),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(pc.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pc.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pc.Category); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "postcategory.Category",
		Name:  "category",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Post",
		Name: "post",
	}
	err = pc.QueryPost().
		Select(post.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

// Node implements Noder interface
func (u *User) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     u.ID,
		Type:   "User",
		Fields: make([]*Field, 12),
		Edges:  make([]*Edge, 5),
	}
	var buf []byte
	if buf, err = json.Marshal(u.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.DeletedAt); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "time.Time",
		Name:  "deleted_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.DeletedBy); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "deleted_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.DisplayName); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "string",
		Name:  "display_name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.Alias); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "alias",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.ProfileImage); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "string",
		Name:  "profile_image",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.AuthProvider); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "user.AuthProvider",
		Name:  "auth_provider",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.Role); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "user.Role",
		Name:  "role",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.LastSeenAt); err != nil {
		return nil, err
	}
	node.Fields[9] = &Field{
		Type:  "time.Time",
		Name:  "last_seen_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.LastPostSeenCursor); err != nil {
		return nil, err
	}
	node.Fields[10] = &Field{
		Type:  "string",
		Name:  "last_post_seen_cursor",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.Awards); err != nil {
		return nil, err
	}
	node.Fields[11] = &Field{
		Type:  "[]string",
		Name:  "awards",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Post",
		Name: "saved_posts",
	}
	err = u.QuerySavedPosts().
		Select(post.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Post",
		Name: "liked_posts",
	}
	err = u.QueryLikedPosts().
		Select(post.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Post",
		Name: "published_posts",
	}
	err = u.QueryPublishedPosts().
		Select(post.FieldID).
		Scan(ctx, &node.Edges[2].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "Comment",
		Name: "comments",
	}
	err = u.QueryComments().
		Select(comment.FieldID).
		Scan(ctx, &node.Edges[3].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[4] = &Edge{
		Type: "ApiKey",
		Name: "api_key",
	}
	err = u.QueryAPIKey().
		Select(apikey.FieldID).
		Scan(ctx, &node.Edges[4].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

// Node returns the node with given global ID.
//
// This API helpful in case you want to build
// an administrator tool to browser all types in system.
func (c *Client) Node(ctx context.Context, id uuid.UUID) (*Node, error) {
	n, err := c.Noder(ctx, id)
	if err != nil {
		return nil, err
	}
	return n.Node(ctx)
}
