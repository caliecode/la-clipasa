// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/laclipasa/la-clipasa/internal/ent/generated/post"
	"github.com/laclipasa/la-clipasa/internal/ent/generated/postcategory"
	"github.com/laclipasa/la-clipasa/internal/ent/generated/predicate"
)

// PostCategoryUpdate is the builder for updating PostCategory entities.
type PostCategoryUpdate struct {
	config
	hooks     []Hook
	mutation  *PostCategoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PostCategoryUpdate builder.
func (pcu *PostCategoryUpdate) Where(ps ...predicate.PostCategory) *PostCategoryUpdate {
	pcu.mutation.Where(ps...)
	return pcu
}

// SetUpdatedAt sets the "updated_at" field.
func (pcu *PostCategoryUpdate) SetUpdatedAt(t time.Time) *PostCategoryUpdate {
	pcu.mutation.SetUpdatedAt(t)
	return pcu
}

// SetCategory sets the "category" field.
func (pcu *PostCategoryUpdate) SetCategory(po postcategory.Category) *PostCategoryUpdate {
	pcu.mutation.SetCategory(po)
	return pcu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (pcu *PostCategoryUpdate) SetNillableCategory(po *postcategory.Category) *PostCategoryUpdate {
	if po != nil {
		pcu.SetCategory(*po)
	}
	return pcu
}

// SetPostID sets the "post" edge to the Post entity by ID.
func (pcu *PostCategoryUpdate) SetPostID(id uuid.UUID) *PostCategoryUpdate {
	pcu.mutation.SetPostID(id)
	return pcu
}

// SetNillablePostID sets the "post" edge to the Post entity by ID if the given value is not nil.
func (pcu *PostCategoryUpdate) SetNillablePostID(id *uuid.UUID) *PostCategoryUpdate {
	if id != nil {
		pcu = pcu.SetPostID(*id)
	}
	return pcu
}

// SetPost sets the "post" edge to the Post entity.
func (pcu *PostCategoryUpdate) SetPost(p *Post) *PostCategoryUpdate {
	return pcu.SetPostID(p.ID)
}

// Mutation returns the PostCategoryMutation object of the builder.
func (pcu *PostCategoryUpdate) Mutation() *PostCategoryMutation {
	return pcu.mutation
}

// ClearPost clears the "post" edge to the Post entity.
func (pcu *PostCategoryUpdate) ClearPost() *PostCategoryUpdate {
	pcu.mutation.ClearPost()
	return pcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pcu *PostCategoryUpdate) Save(ctx context.Context) (int, error) {
	pcu.defaults()
	return withHooks(ctx, pcu.sqlSave, pcu.mutation, pcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pcu *PostCategoryUpdate) SaveX(ctx context.Context) int {
	affected, err := pcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pcu *PostCategoryUpdate) Exec(ctx context.Context) error {
	_, err := pcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcu *PostCategoryUpdate) ExecX(ctx context.Context) {
	if err := pcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcu *PostCategoryUpdate) defaults() {
	if _, ok := pcu.mutation.UpdatedAt(); !ok {
		v := postcategory.UpdateDefaultUpdatedAt()
		pcu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcu *PostCategoryUpdate) check() error {
	if v, ok := pcu.mutation.Category(); ok {
		if err := postcategory.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`generated: validator failed for field "PostCategory.category": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pcu *PostCategoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PostCategoryUpdate {
	pcu.modifiers = append(pcu.modifiers, modifiers...)
	return pcu
}

func (pcu *PostCategoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(postcategory.Table, postcategory.Columns, sqlgraph.NewFieldSpec(postcategory.FieldID, field.TypeUUID))
	if ps := pcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcu.mutation.UpdatedAt(); ok {
		_spec.SetField(postcategory.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pcu.mutation.Category(); ok {
		_spec.SetField(postcategory.FieldCategory, field.TypeEnum, value)
	}
	if pcu.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   postcategory.PostTable,
			Columns: []string{postcategory.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   postcategory.PostTable,
			Columns: []string{postcategory.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(pcu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{postcategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pcu.mutation.done = true
	return n, nil
}

// PostCategoryUpdateOne is the builder for updating a single PostCategory entity.
type PostCategoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PostCategoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (pcuo *PostCategoryUpdateOne) SetUpdatedAt(t time.Time) *PostCategoryUpdateOne {
	pcuo.mutation.SetUpdatedAt(t)
	return pcuo
}

// SetCategory sets the "category" field.
func (pcuo *PostCategoryUpdateOne) SetCategory(po postcategory.Category) *PostCategoryUpdateOne {
	pcuo.mutation.SetCategory(po)
	return pcuo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (pcuo *PostCategoryUpdateOne) SetNillableCategory(po *postcategory.Category) *PostCategoryUpdateOne {
	if po != nil {
		pcuo.SetCategory(*po)
	}
	return pcuo
}

// SetPostID sets the "post" edge to the Post entity by ID.
func (pcuo *PostCategoryUpdateOne) SetPostID(id uuid.UUID) *PostCategoryUpdateOne {
	pcuo.mutation.SetPostID(id)
	return pcuo
}

// SetNillablePostID sets the "post" edge to the Post entity by ID if the given value is not nil.
func (pcuo *PostCategoryUpdateOne) SetNillablePostID(id *uuid.UUID) *PostCategoryUpdateOne {
	if id != nil {
		pcuo = pcuo.SetPostID(*id)
	}
	return pcuo
}

// SetPost sets the "post" edge to the Post entity.
func (pcuo *PostCategoryUpdateOne) SetPost(p *Post) *PostCategoryUpdateOne {
	return pcuo.SetPostID(p.ID)
}

// Mutation returns the PostCategoryMutation object of the builder.
func (pcuo *PostCategoryUpdateOne) Mutation() *PostCategoryMutation {
	return pcuo.mutation
}

// ClearPost clears the "post" edge to the Post entity.
func (pcuo *PostCategoryUpdateOne) ClearPost() *PostCategoryUpdateOne {
	pcuo.mutation.ClearPost()
	return pcuo
}

// Where appends a list predicates to the PostCategoryUpdate builder.
func (pcuo *PostCategoryUpdateOne) Where(ps ...predicate.PostCategory) *PostCategoryUpdateOne {
	pcuo.mutation.Where(ps...)
	return pcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pcuo *PostCategoryUpdateOne) Select(field string, fields ...string) *PostCategoryUpdateOne {
	pcuo.fields = append([]string{field}, fields...)
	return pcuo
}

// Save executes the query and returns the updated PostCategory entity.
func (pcuo *PostCategoryUpdateOne) Save(ctx context.Context) (*PostCategory, error) {
	pcuo.defaults()
	return withHooks(ctx, pcuo.sqlSave, pcuo.mutation, pcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pcuo *PostCategoryUpdateOne) SaveX(ctx context.Context) *PostCategory {
	node, err := pcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pcuo *PostCategoryUpdateOne) Exec(ctx context.Context) error {
	_, err := pcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcuo *PostCategoryUpdateOne) ExecX(ctx context.Context) {
	if err := pcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcuo *PostCategoryUpdateOne) defaults() {
	if _, ok := pcuo.mutation.UpdatedAt(); !ok {
		v := postcategory.UpdateDefaultUpdatedAt()
		pcuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcuo *PostCategoryUpdateOne) check() error {
	if v, ok := pcuo.mutation.Category(); ok {
		if err := postcategory.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`generated: validator failed for field "PostCategory.category": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pcuo *PostCategoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PostCategoryUpdateOne {
	pcuo.modifiers = append(pcuo.modifiers, modifiers...)
	return pcuo
}

func (pcuo *PostCategoryUpdateOne) sqlSave(ctx context.Context) (_node *PostCategory, err error) {
	if err := pcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(postcategory.Table, postcategory.Columns, sqlgraph.NewFieldSpec(postcategory.FieldID, field.TypeUUID))
	id, ok := pcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "PostCategory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, postcategory.FieldID)
		for _, f := range fields {
			if !postcategory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != postcategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(postcategory.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pcuo.mutation.Category(); ok {
		_spec.SetField(postcategory.FieldCategory, field.TypeEnum, value)
	}
	if pcuo.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   postcategory.PostTable,
			Columns: []string{postcategory.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   postcategory.PostTable,
			Columns: []string{postcategory.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(pcuo.modifiers...)
	_node = &PostCategory{config: pcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{postcategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pcuo.mutation.done = true
	return _node, nil
}
