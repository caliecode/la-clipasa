// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (ak *ApiKey) Owner(ctx context.Context) (*User, error) {
	result, err := ak.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = ak.QueryOwner().Only(ctx)
	}
	return result, err
}

func (c *Comment) Owner(ctx context.Context) (*User, error) {
	result, err := c.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryOwner().Only(ctx)
	}
	return result, err
}

func (c *Comment) Post(ctx context.Context) (*Post, error) {
	result, err := c.Edges.PostOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryPost().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (po *Post) Owner(ctx context.Context) (*User, error) {
	result, err := po.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = po.QueryOwner().Only(ctx)
	}
	return result, err
}

func (po *Post) Comments(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *CommentOrder, where *CommentWhereInput,
) (*CommentConnection, error) {
	opts := []CommentPaginateOption{
		WithCommentOrder(orderBy),
		WithCommentFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := po.Edges.totalCount[1][alias]
	if nodes, err := po.NamedComments(alias); err == nil || hasTotalCount {
		pager, err := newCommentPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &CommentConnection{Edges: []*CommentEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return po.QueryComments().Paginate(ctx, after, first, before, last, opts...)
}

func (po *Post) SavedBy(ctx context.Context) (result []*User, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = po.NamedSavedBy(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = po.Edges.SavedByOrErr()
	}
	if IsNotLoaded(err) {
		result, err = po.QuerySavedBy().All(ctx)
	}
	return result, err
}

func (po *Post) LikedBy(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *UserOrder, where *UserWhereInput,
) (*UserConnection, error) {
	opts := []UserPaginateOption{
		WithUserOrder(orderBy),
		WithUserFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := po.Edges.totalCount[3][alias]
	if nodes, err := po.NamedLikedBy(alias); err == nil || hasTotalCount {
		pager, err := newUserPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &UserConnection{Edges: []*UserEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return po.QueryLikedBy().Paginate(ctx, after, first, before, last, opts...)
}

func (po *Post) Categories(ctx context.Context) (result []*PostCategory, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = po.NamedCategories(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = po.Edges.CategoriesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = po.QueryCategories().All(ctx)
	}
	return result, err
}

func (pc *PostCategory) Post(ctx context.Context) (*Post, error) {
	result, err := pc.Edges.PostOrErr()
	if IsNotLoaded(err) {
		result, err = pc.QueryPost().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (u *User) SavedPosts(ctx context.Context) (result []*Post, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedSavedPosts(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.SavedPostsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QuerySavedPosts().All(ctx)
	}
	return result, err
}

func (u *User) LikedPosts(ctx context.Context) (result []*Post, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedLikedPosts(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.LikedPostsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryLikedPosts().All(ctx)
	}
	return result, err
}

func (u *User) PublishedPosts(ctx context.Context) (result []*Post, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedPublishedPosts(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.PublishedPostsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryPublishedPosts().All(ctx)
	}
	return result, err
}

func (u *User) Comments(ctx context.Context) (result []*Comment, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedComments(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.CommentsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryComments().All(ctx)
	}
	return result, err
}

func (u *User) APIKeys(ctx context.Context) (result []*ApiKey, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedAPIKeys(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.APIKeysOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryAPIKeys().All(ctx)
	}
	return result, err
}
