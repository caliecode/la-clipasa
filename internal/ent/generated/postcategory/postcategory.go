// Code generated by ent, DO NOT EDIT.

package postcategory

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the postcategory type in the database.
	Label = "post_category"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldCategory holds the string denoting the category field in the database.
	FieldCategory = "category"
	// EdgePost holds the string denoting the post edge name in mutations.
	EdgePost = "post"
	// Table holds the table name of the postcategory in the database.
	Table = "post_categories"
	// PostTable is the table that holds the post relation/edge.
	PostTable = "post_categories"
	// PostInverseTable is the table name for the Post entity.
	// It exists in this package in order to avoid circular dependency with the "post" package.
	PostInverseTable = "posts"
	// PostColumn is the table column denoting the post relation/edge.
	PostColumn = "post_categories"
)

// Columns holds all SQL columns for postcategory fields.
var Columns = []string{
	FieldID,
	FieldUpdatedAt,
	FieldCreatedAt,
	FieldCategory,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "post_categories"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"post_categories",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Category defines the type for the "category" enum field.
type Category string

// Category values.
const (
	CategoryRANA              Category = "RANA"
	CategorySIN_SONIDO        Category = "SIN_SONIDO"
	CategoryMEME_ARTESANAL    Category = "MEME_ARTESANAL"
	CategoryNO_SE_YO          Category = "NO_SE_YO"
	CategoryORO               Category = "ORO"
	CategoryDIAMANTE          Category = "DIAMANTE"
	CategoryMEH               Category = "MEH"
	CategoryALERTA_GLONETILLO Category = "ALERTA_GLONETILLO"
	CategoryGRR               Category = "GRR"
	CategoryENSORDECEDOR      Category = "ENSORDECEDOR"
	CategoryRAGUUUL           Category = "RAGUUUL"
)

func (c Category) String() string {
	return string(c)
}

// CategoryValidator is a validator for the "category" field enum values. It is called by the builders before save.
func CategoryValidator(c Category) error {
	switch c {
	case CategoryRANA, CategorySIN_SONIDO, CategoryMEME_ARTESANAL, CategoryNO_SE_YO, CategoryORO, CategoryDIAMANTE, CategoryMEH, CategoryALERTA_GLONETILLO, CategoryGRR, CategoryENSORDECEDOR, CategoryRAGUUUL:
		return nil
	default:
		return fmt.Errorf("postcategory: invalid enum value for category field: %q", c)
	}
}

// AllCategories returns all Category values.
func AllCategories() []Category {
	return []Category{
		CategoryRANA,
		CategorySIN_SONIDO,
		CategoryMEME_ARTESANAL,
		CategoryNO_SE_YO,
		CategoryORO,
		CategoryDIAMANTE,
		CategoryMEH,
		CategoryALERTA_GLONETILLO,
		CategoryGRR,
		CategoryENSORDECEDOR,
		CategoryRAGUUUL,
	}
}

// OrderOption defines the ordering options for the PostCategory queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByCategory orders the results by the category field.
func ByCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategory, opts...).ToFunc()
}

// ByPostField orders the results by post field.
func ByPostField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPostStep(), sql.OrderByField(field, opts...))
	}
}
func newPostStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PostInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PostTable, PostColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Category) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Category) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Category(str)
	if err := CategoryValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Category", str)
	}
	return nil
}
